// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\xc9\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x8a\x2f\xb9\xad\xda\xda\x62\x5b\x33\x2d\x69\xf0\xa8\x67\xe8\x6e\xc9\x18\x97\xaa\x1c\x16\x12\x48\x41\x80\x3b\x96\x25\x2c\x84\xe5\x2e\x49\x71\x77\x89\x9d\xbd\xda\xda\x38\x26\x84\x3f\x26\x1a\xc9\xfe\x69\xff\x85\xab\x9e\x19\xcd\xf4\x48\x23\x24\xb0\xcd\x12\x96\x1f\xd0\x4c\x7f\x79\xef\xcd\xfb\xbc\x7e\xfd\x99\x9e\xe7\x7c\x95\xd7\x6c\x60\x23\x52\x29\xc0\xf3\x55\x58\x1c\x1b\xcb\x57\x31\x32\x8b\x63\x00\xe4\x6b\x98\x23\x60\x54\x11\x65\x98\x17\x60\x9d\x97\x95\x03\x30\xee\xa8\x72\xee\x2a\xf8\x6c\xdd\x6a\x14\xe0\xaf\x94\x53\x87\x94\xc3\x4e\xcd\x45\xdc\x2a\xd9\x18\x02\xc3\x21\x1c\x13\x5e\x80\x0b\x6f\x15\xb0\x59\xc1\xd2\x3c\x82\x6a\xb8\x00\x1b\x16\x5e\x72\x1d\xca\xa5\xa1\x4b\x96\xc9\xab\x05\x13\x37\x2c\x03\x2b\xfe\xcd\x24\xb0\x88\xc5\x2d\x64\x2b\xcc\x40\x36\x2e\x4c\xf7\x89\x41\x75\x5e\x75\xa8\x24\xe4\x8c\x15\xea\xe2\x16\xb7\x71\x71\x7e\xfe\xe8\x09\xe5\xed\xf7\xf2\x5a\x70\x3b\x06\x00\x00\x79\xdb\x22\x8b\x80\x62\xbb\x00\x19\x5f\xb6\x31\xab\x62\xcc\x21\xa8\x52\x5c\x2e\x40\xf1\x54\x6c\x4e\xd3\x0c\x93\xa8\x8c\x23\x6e\x19\x65\xcb\xc6\xaa\x43\x2b\x1a\x5f\xb2\x38\xc7\x54\x29\x39\x0e\x67\x9c\x22\x57\x9b\x55\xf7\xab\x33\x9a\xc1\x98\x16\xb5\xa9\x06\x63\x30\xd4\xc3\x0c\x6a\xb9\x1c\x30\x6a\x3c\x53\xee\x99\xb3\x75\x4c\x97\xb5\x19\x75\xbf\x3a\x1d\xde\xa8\x35\x8b\xa8\x67\x18\x2c\xe6\xb5\x40\xc8\x08\x96\x6b\x81\x58\xcd\x70\x6a\x35\x87\x84\x76\xe4\xb5\x00\xcd\xb1\x7c\xc9\x31\x97\x7d\xc7\x88\x06\x4c\x43\x81\xa6\xd5\x00\x86\x8d\x18\x2b\x40\x82\x1a\x25\x44\x41\xf0\xa3\x98\x88\x2e\x82\x52\x25\xf8\x65\x55\x64\x3a\x4b\x0a\xab\x85\x4f\x96\x9c\x28\x7c\x8f\x2c\x82\x29\x30\x95\xb2\x8d\xcf\x81\x33\x75\xc6\xad\xf2\xb2\x12\x82\xa2\x94\x30\x5f\xc2\x98\x44\x93\x01\xc8\x23\xc0\x11\xad\x88\xb0\x2a\xd9\x88\x2c\xf6\x7a\xbf\x62\xf1\x6a\xbd\xa4\x1a\x4e\x4d\x3b\x83\x31\x63\xcb\x39\xcd\x34\x09\x53\x2a\x0e\x4c\x9a\xab\x94\x28\x22\x66\x57\x31\xb2\xad\x0a\x51\x2c\x8e\x6b\x4c\x31\x30\xe1\x98\x4a\x3a\x05\x20\x8d\x0a\x38\x57\xb3\x09\x0b\x34\xcd\x69\xda\xd2\xd2\x92\xba\x34\xe3\xc3\x90\x9b\x9a\x9a\xd2\x58\xa3\x02\x41\x10\x88\x30\x37\x05\x41\x15\x5b\x95\x2a\x0f\xae\xcb\x96\x6d\x17\x20\x71\x08\x86\x80\x71\xea\x2c\xe2\x02\x34\xea\x94\x62\xc2\x0f\x3b\xb6\x43\xa1\xa4\x0a\x84\x23\x14\xdb\x22\xd8\x40\x6e\x01\x52\xa7\x4e\x4c\x28\x37\x9f\x71\x2c\xd2\xdb\xde\x55\x0d\x01\xa2\x16\x52\xaa\x96\x69\x62\x52\x80\x9c\xd6\x71\xf4\xe4\x35\xaa\xe4\x92\xba\xc4\x62\x7a\xd3\x39\x57\x80\x53\x60\x0a\xe4\x66\x41\x6e\x16\x82\xb2\x63\xd4\x19\x2a\xd9\xb8\x00\xcb\xc8\x66\x38\xe1\x09\x00\xf2\x2e\xe2\x55\x60\x16\xe0\xbb\xb9\x19\x30\xfd\x73\x94\x03\x39\x20\x66\x4f\x2b\x39\x90\x7b\x67\x46\xbe\x57\x72\xef\x1f\x88\xef\x41\x4e\xc9\x55\x67\xed\x9c\x32\x53\xd5\xed\x1c\x98\xa9\xce\xca\x7d\x20\x77\x1e\x02\xad\x47\x95\x61\x51\xc3\xc6\xc0\x38\x57\x80\xd3\x39\x08\x8c\xe5\x02\x9c\x9e\x81\x80\x16\xe0\x6c\xcf\xe0\xbc\x00\x20\x09\x19\xa7\x0e\xa9\xc4\xeb\x38\xbc\x8f\x23\x49\x43\x51\x4c\x6a\xa6\xd5\x08\xe3\xba\x7b\x19\xc4\x7f\x10\xee\x7e\xea\x40\x16\x01\xd4\x11\x5e\x11\x97\xc2\xef\xcb\xc1\x0d\xad\x58\x44\xe1\x8e\x3b\x07\xa6\xf7\xbb\xe7\x0e\x02\xa7\x81\x69\xd9\x76\x96\xe6\x40\x00\xc2\x41\xd8\xbf\x64\xa8\xb3\x34\x60\x45\xd8\x4a\xcd\x54\x74\xe0\x94\xcb\x0c\x73\x71\x3d\x23\x47\x7f\xd9\xa1\xb5\xe2\x98\xfc\x98\xa5\x3a\xe7\x0e\xe9\xce\x2f\x71\x02\x4a\x9c\x28\x2e\xb5\x6a\x88\x2e\x03\x56\x2f\xd5\x2c\x7e\xba\xc4\xfb\x0c\x2e\x39\x9c\x3b\xb5\xd0\x66\x58\x3c\x81\x1a\x38\xaf\x05\xc2\x92\x0a\x24\xeb\x90\x8d\x29\x07\xfe\xff\x0a\xab\x1b\x06\x66\x2c\x12\x6b\x5a\xcc\xb5\xd1\xf2\x1c\x10\x61\x7e\xb0\x37\x66\x02\xe7\x03\xcb\x2c\x40\x8a\x59\xdd\xe6\xef\xb2\x0a\x2c\xb6\x9e\xde\xf7\xbe\xbe\xd3\xbe\x7c\xc3\xfb\xf8\x41\x3f\x40\x11\x18\x03\xac\x11\x9b\x80\x8d\x79\xaf\xaa\xea\xfe\x9e\x01\xa7\x4f\x0b\x24\x61\x71\xfe\xe8\x89\xf6\xbd\x6b\xde\xc7\x0f\xbd\xdf\x7f\x98\xd7\xaa\xfb\x7b\xe6\xf5\x4b\x3e\x7d\x5a\xa4\x3e\x98\x30\xa0\x77\xa8\x00\x44\xa9\x50\xa7\xee\x02\x19\x53\x69\xb0\x8d\x4a\xd8\x96\xf1\x65\x35\x25\x07\xc4\x85\x3f\xd7\xef\x16\xe9\xda\xbf\x48\x99\xdf\x13\x1d\xac\xa6\x4c\x4f\xa5\xe8\x49\x31\xcb\xa8\x62\x63\x11\xc4\x97\x8a\x45\x44\xf6\xe8\xd3\x9d\x22\x0b\x80\xbc\x45\xdc\x3a\xef\x97\xa7\xf8\xed\x10\xf0\x65\x17\x17\x20\x45\xa6\xe5\xc0\x70\x4b\x9d\x27\xec\x28\xaa\x61\xe8\xc3\x8c\x6c\xcb\x24\x0c\x82\x06\xb2\xeb\x38\xbe\x75\x88\x61\x5b\xc6\x62\xb7\xe1\xb0\x10\x89\xcd\x7f\xa9\x93\xec\x04\x04\x2b\x2b\x56\x19\xe0\xb3\x60\x5c\x9d\x3f\x7a\x42\x15\xb2\x40\x77\x62\xb3\x69\x04\x43\x57\x56\x30\x31\x9b\xcd\x01\x46\x27\x9c\x2d\x19\x1d\x3c\xa9\xf0\x45\x64\x4a\xba\x04\x00\x0e\xf9\xdd\xd9\xed\x3b\x4f\xb7\x3f\xba\xda\xda\xbc\x39\x91\xae\x69\x10\x5e\x89\x6c\xf2\x2a\x03\x64\x12\xe6\x3a\x66\x04\x50\xf7\x36\x02\x28\x68\x18\x0e\x50\x38\x71\x17\x01\x0a\x25\x0e\x02\x68\xde\xef\xce\x6e\x5d\xfa\x61\x6b\x6d\xfd\x35\x06\xc8\xb0\x9d\xba\x59\xb6\x11\xc5\x11\x48\x72\x53\x04\x54\xdc\x38\x1c\x2c\x49\xc0\x2e\x02\x26\x49\x1d\x04\xda\xe1\x68\xc8\x6b\x8a\x56\xb5\x8e\x96\xb0\xe5\x7b\x22\x82\x2b\xd1\x16\xe1\x25\xb5\x0e\x07\x4c\x16\xb1\x8b\x88\xc9\x62\x07\x41\xe6\x5d\xfb\xa4\xb5\xb1\xd9\xda\xbc\xb9\x7b\x88\xb1\x1a\xb2\xed\x6e\xf6\x39\x5d\xc5\xb6\x0b\x13\x86\x72\x7c\x8e\x03\xf1\x9f\x52\xab\x73\x6c\xfa\x6f\x31\x62\x4a\xca\xb6\x98\xa6\xa3\x9f\x2f\x80\x17\xdc\xae\x7d\x27\xcd\x13\xb6\x30\x1f\x25\xcb\x05\xf3\x48\xe0\xc0\x61\x5b\xf9\xc2\xfc\x6e\x6c\xe6\x29\xe1\xe8\x10\x4e\x1d\x5b\x8a\xbe\xae\x75\xe1\x65\x18\x75\x2b\x2b\x7e\xfc\x2c\xcc\x37\x9b\x69\x0f\xf8\x72\x1c\x77\x02\x1b\x54\xbc\x61\x86\xce\x0b\x6e\x47\x74\x60\x30\xf8\x65\x39\x51\xb6\x54\xba\x4d\x3a\x33\x68\xdd\x99\x43\xfb\x06\xee\x2e\xbd\x5d\x38\xf6\xfe\xec\x4b\xa7\xb5\x3e\xdc\x96\xdb\x98\x3d\x8d\x09\x0a\xce\x6f\x92\xe0\xc2\x62\xfb\xce\xba\x77\xe3\x4b\xef\xc6\x7a\xe7\xd6\xa3\xdd\xc3\x34\x48\xc7\x7e\x62\x2b\x39\xe7\x60\x6a\xde\x16\xc9\x3f\xf5\x3d\xcd\x7f\xe5\xf1\x01\x4f\x98\x1e\x84\xc4\x82\xdb\x98\x7d\x2b\x6c\x89\x33\xb2\x68\x55\x83\x66\x20\xde\xa9\x87\xe7\xe2\x97\xb1\xd0\x7c\xf3\xeb\x74\x84\x35\xb5\xf5\xc9\xb7\xde\xf5\xdb\x0b\xc7\xda\xb7\xbf\xf3\xbe\xbf\xfe\x12\xdf\x36\x76\x6f\xbb\x15\x10\xbc\x8d\xf9\xc9\x65\x37\xdc\x72\xeb\xd4\x3e\x2e\x06\x88\x8e\x68\xc1\xfa\xde\xf0\x71\x23\x18\x04\xb0\x85\x93\x00\x24\x98\x2f\x10\x8e\x69\x19\x19\xfd\xfc\x27\xde\xa0\xeb\xd4\x3e\x2c\xae\xb2\x19\xe1\xdf\xcc\xc4\xa0\x47\x18\x65\xa3\x4d\xd8\x58\xdc\x5e\xbd\xbb\xf5\xf4\xa3\xf6\x27\x5f\x78\xd7\xff\x2b\x40\x64\x2f\x89\xcf\x1e\xba\x5e\xf6\x64\x3f\x06\x09\x3f\x47\x8b\xe8\xc5\xc0\x90\x87\xed\x1a\x2a\xe9\xe6\x87\xf0\x74\x9e\xdc\xf4\xae\x3d\xdc\x01\x3c\x72\x86\x92\x17\x67\xda\x06\x24\x14\x9f\x12\x63\xa2\x6c\xe4\xcf\xf0\xcf\xf0\x4c\xcc\x0c\x6a\x95\xb0\x59\x5a\x8e\xfb\x42\xd6\x14\x6f\x4f\xbe\x57\x4f\x1d\x3f\x92\xba\x39\x09\xce\x85\x6d\x6c\x0c\xd8\x04\x23\xa5\xb2\x43\x4e\x07\x33\x64\x0b\x8f\xca\x58\x09\x52\xe6\x8f\x18\x42\xf1\x7a\x2c\x7e\x75\x79\x9e\x6f\xa8\xe9\xd4\x90\x45\xd8\xf0\x4c\x3a\x1f\x0c\xdc\x8d\x14\x2a\x3c\x80\x28\x46\x43\xc0\x89\x4c\x8b\x01\x99\xef\x36\x51\x67\x89\x15\xe0\xcc\xc0\x88\x09\xe7\x06\x18\x14\xc7\x56\x56\x14\x40\x11\xa9\x60\x30\x6e\x4d\x82\xf1\x06\x98\x2b\x84\xeb\x32\x94\xd8\x6c\x8e\xad\xac\x8c\x37\xfc\x1f\x05\x60\x62\x02\xa5\xd9\x4c\x8d\xfe\xae\xf1\xa3\x44\x41\xc2\x8a\x67\x47\x42\x6b\x63\x75\xeb\xe1\xd5\xd6\xc6\x6a\x6b\xe3\x7f\xbc\x07\x0f\xbc\x1b\xd7\x76\x1e\x1b\x7b\xcf\xbc\xf4\xe7\x63\x5e\x49\x93\x77\x31\x8e\xf5\x9f\x2e\x0f\xd3\xfb\x79\x98\x9e\xca\xc3\xf4\x57\x92\x87\xe9\xff\x48\x3c\x4c\x1f\xc4\xc3\xf4\xc1\x3c\x4c\xdf\x19\x0f\xd3\x77\x8d\x87\xe9\x3f\x69\x1e\xa6\x0f\xe5\x61\xfa\x08\x3c\xec\xf9\xc1\x48\xe7\x61\x3b\x44\x25\xdd\xfc\x97\xcb\xc3\xa2\xf4\xe3\x0f\x89\xfd\x7c\x6a\x20\x0f\xd3\x07\xf1\x30\x7d\x87\x3c\x4c\x1f\xc2\xc3\xf4\x17\xe5\x61\xfa\x4f\x85\x87\xe9\xaf\x2e\x0f\xd3\x53\x78\x98\x3e\x22\x0f\xd3\x47\xe5\x61\xfa\x5e\xf2\x30\xfd\x35\xe7\x61\xde\xa5\xbf\x7a\x6b\xbf\xdb\xbe\x74\xad\xf3\x64\xed\x55\xe0\x63\xa7\x18\xa6\xc4\xff\x40\x30\x2c\x96\x3b\x9f\x3e\xf6\x9e\xfc\xbe\x73\xeb\x51\xfb\xf2\xb7\xbe\xa7\x5f\xc2\xd1\x67\x6c\x9d\x08\x8f\xf8\x2e\xce\x68\xdd\xb6\x66\x33\x2d\xac\xbb\xbd\xdd\x90\x4e\xb1\x21\x8e\xbe\xe4\xe0\x61\x91\xb7\xd9\x7a\x7a\xbf\xfd\xf1\xe7\xad\x27\x7f\xea\xdc\xbd\xd8\x7a\xfa\xb0\xfd\xc1\xba\xb7\x76\xc5\xbb\xf4\x68\x12\x78\x8f\x37\xb7\xd6\xd6\xb6\x7e\xf8\x0f\xef\xd2\x17\x7f\xd7\x64\x75\x0c\x31\xb6\xe4\x50\x73\x54\x70\xbd\xf5\x0f\x3b\x7f\xfa\x60\x8f\x91\x0d\xf6\x3a\x37\x32\x2d\x40\x3a\x36\x55\x40\x11\xdf\xc5\x48\x77\xdb\xd2\x91\xee\xca\x1b\x09\xe9\xe4\xe0\x57\x06\xe9\x3d\x4e\x3d\xff\x86\x4b\x55\xc7\x59\x7c\x15\xb2\x4e\x68\xca\xa9\xe3\x47\x86\x87\xe6\xa9\xe3\x47\x5e\x4a\xae\x91\x6d\x12\x41\x22\xdf\xc7\x51\x18\xb7\xa6\xc7\x61\xdc\x3f\x52\x24\xf6\x0e\x7f\x76\x2c\xa6\x93\xd8\x17\xae\x36\xdc\xb7\x14\x68\x87\xc5\xce\x85\xef\xbc\x8f\x1e\x7b\xd7\x2f\x6c\xad\xfe\xce\x5b\xbb\xd3\xbe\xfd\x5d\x68\xd8\xd6\xfa\x5f\xda\x77\x3e\xc9\x6b\xa8\x98\x2f\x51\x2d\xdd\x80\xf6\xad\xf5\xf6\xd5\x0f\x3a\x77\x2f\x7a\xd7\xef\x6c\x7f\x74\x7d\xdf\x8a\xe5\x36\x66\x0f\x99\x26\x6d\x4e\x82\xe0\xe6\xb8\x5f\x4e\x15\xdd\x76\xe9\x43\x78\xaf\xcb\x63\xf5\xe4\xd8\x2e\x79\x49\xa7\x15\x7f\xc7\xd4\x1a\xfa\xe7\x38\x3e\x5b\xc7\x8c\xbf\x29\x16\xcb\xd0\x48\x96\x06\xbf\x1c\x46\x98\x66\x64\x22\xd8\x13\x3d\xcf\xa0\x87\xfd\xc3\x65\x92\xa8\xf6\x77\xef\x94\x09\x0e\x52\xf8\x02\xeb\x43\x92\xd1\xda\xd8\xec\xfc\xf7\xe6\xdb\x6f\x9d\xdc\x5a\xff\xb6\xfd\xe7\x0b\x7f\xfb\xfe\x6a\x6b\xe3\x5a\xd0\x78\xec\xbd\x13\x61\xeb\x8f\xab\x17\x7a\x22\xda\xbb\x71\xb5\xb5\xf1\xf1\x9e\x44\xe0\x28\x29\x7f\x6f\xab\x27\xf3\x5a\x50\xaf\x99\x62\x4f\x4a\xd1\x67\xa2\xd0\xd3\x8d\xd1\x20\x5c\x59\xf2\x8b\x89\x15\x5b\xfc\x1f\xa0\x52\xa2\x18\x2d\xa6\x17\xa1\xfa\x36\xf9\xd3\x98\x75\x1e\xcf\x81\xe9\x99\xe8\x98\xcd\x76\x2a\x7e\x69\xb8\x9b\x62\x93\x54\xf9\x2a\xd2\x82\xff\x18\x79\xb9\x86\x7c\x3c\x5b\xae\x13\x83\x5b\x0e\xc9\x4e\xac\x84\xf3\xc7\xb3\x50\x95\xbc\x34\xa1\x3a\x24\x9b\xf1\x4f\x0c\x32\x93\xd1\x68\x3c\x01\x56\xa2\x27\xc3\xaa\x4b\x71\x03\x13\x3e\x8f\xcb\xa8\x6e\xf3\xec\xc4\xc1\xa8\x6f\x3c\x9b\x11\x5b\x63\x66\x42\x45\xc4\xaa\x21\x8e\xb3\x2b\x80\x19\xd4\xb1\xed\x93\xe2\xc9\xa6\x40\x73\x12\xcc\x4c\x4d\xc9\x33\x54\x74\x06\x9d\xcb\xae\x48\x98\xd6\x30\xaf\x3a\xe6\x1c\x80\x22\xec\xe0\xa4\xd4\x53\xa7\xf6\x1c\x80\x1a\x43\x0d\x9c\x68\x37\x11\x47\x73\x42\xb9\x40\x2b\x33\xa1\x32\x4c\x2d\x64\x5b\xe7\x71\x76\x42\x1e\x16\x56\xbc\xce\x81\xee\x83\x81\x6c\x50\xcb\x2a\x3f\x5e\xf8\x18\xaa\x5f\x24\x9b\x99\x50\x0d\xc6\xb2\xdd\xda\x58\x38\x09\x60\xc9\x76\x8c\x45\x28\x3d\x81\xf8\x67\x95\xbb\xa2\xc0\x3f\x15\x0a\x00\x3a\x8b\xb0\x57\x66\x52\x2a\x32\xcd\xc3\x22\x3c\xb2\x41\x49\xae\x62\x8a\x57\x49\x0a\x7b\x2b\xe1\xc6\xb3\x99\x7d\x51\xb9\x6d\x66\x42\xad\xf2\x9a\xdd\xb5\x39\x31\xb4\x09\xb0\xcd\x70\x9f\x4a\x4d\x03\xce\x62\x4f\x1b\xc3\xfc\xa4\x55\xc3\x4e\x9d\xa7\x84\xc3\x68\x3e\xf0\x0b\xe1\x7b\x5c\x00\x42\x6c\xa7\x7a\x0c\x1b\x93\x07\x48\x37\x98\x52\x87\xc6\x50\x64\xcf\x9c\xfd\xd5\x3b\xc7\x7b\x9d\xe6\x1b\x10\x74\xf9\x7f\x3a\x51\x67\x27\xf1\x39\x9e\xd0\x1c\x2b\x68\x76\x35\x37\x27\x82\x15\xdc\xfd\x6d\x20\x0a\x4a\xb8\xec\x50\xec\xd7\xd9\x14\x20\x0c\xda\xa3\x30\xe8\x2f\x65\x8d\xec\x30\x1d\xa3\x5e\xc3\x84\xab\x15\xcc\xdf\xb2\xb1\xb8\x7c\x73\x79\xc1\xcc\x86\x25\x3b\x13\xaa\x69\xf9\xa5\xf6\x66\x01\xf8\xb5\xf6\xe1\x34\x11\x10\x92\xca\xd8\x27\x43\xe5\x05\x6c\x4a\xb6\x77\x6c\x98\x29\x52\x6d\xd3\x84\x6a\x11\x82\xe9\x3b\x27\xdf\x3d\x02\x0a\x00\x1e\xf2\x03\xfe\x5f\xf1\x32\x58\x98\x87\x23\x88\x91\xab\x7c\x06\x8a\x0a\x0b\x6c\x46\x10\x17\x6c\x4b\x3d\x82\x62\x4a\x96\x39\xed\x73\xb2\x4c\xc0\xc9\x32\x5d\x4e\x46\x51\x4d\x35\x1c\xc2\x1c\x1b\xab\xc8\xb6\x96\xeb\xc4\xe7\x67\x35\x44\x50\x05\x6b\x68\xf1\x17\xcc\xad\x15\xf6\x4f\xff\x4c\x57\xa7\x73\x07\xa6\x0f\x4c\xfd\x7c\x46\x25\xa8\xa1\x50\x91\x5b\x55\x13\x2d\xaa\xb3\x07\x0e\xfc\x6c\x5a\x37\xa7\x6a\xef\xa0\x77\x2b\x95\x4c\xd1\xbb\xfc\x47\xef\xf1\x26\x88\x9e\x40\x30\xb6\xc0\xfc\x66\x4f\x20\xf4\x97\xcc\xbe\x26\x81\xb0\x63\xf8\x4f\x3a\x8b\x98\xec\x1d\xe6\x5d\xbc\x03\x00\x54\x83\x68\xc8\x30\x9c\x3a\xe1\x1a\x17\x8a\xbb\x18\x7a\xeb\x1f\x6e\xff\xfb\x17\x83\xf1\x4b\xaf\xa4\x1d\x8e\xe1\x60\xc7\x75\x1f\x59\x82\x01\x14\x46\x04\xef\xf9\x23\x87\xd3\xd1\x67\x85\xf1\x01\x5f\x6d\x60\x4d\xc4\xaa\x6a\x0c\x8b\xbf\x92\x5d\xea\x94\x2d\x1b\x6b\xc8\xb5\x14\x1f\x5e\xd6\xc5\xb7\xf5\xf8\xf3\xce\x95\xab\x4a\xb1\xf3\xfd\xed\xad\x1f\x6e\x7a\x57\x37\xbd\x07\x0f\xc0\xfc\xd1\x13\xd9\xd6\x93\xa7\x9d\x5b\x8f\xda\x8f\x1e\xb6\xef\x3f\x9d\x18\x8c\xff\x80\xca\xdc\xd7\x64\x11\x07\x09\x0c\xf8\xe9\xdc\xdc\x21\xec\x41\x17\x88\x45\xee\xfd\xda\x96\xc0\xf1\xc3\xc0\x42\x35\xed\x17\xb6\xe3\xff\x79\xe7\xf9\xaa\x62\x90\x7d\x5a\xcd\x22\x58\xac\xfc\x20\x4f\x67\x8a\xed\xdb\xdf\x78\xff\xf9\xd9\xd6\xda\xd3\xed\x3f\xac\x0d\x58\xfb\x62\x73\x37\x83\x3a\x6e\x50\x00\x99\x95\x95\xb8\xf8\xba\xd9\xcc\x04\x63\xd8\x92\xc5\x8d\x6a\x36\x1c\x16\x91\x1d\x03\xb1\xf8\xcf\x1f\xe6\x24\xea\xd1\xbf\x0d\x44\x5d\x3e\x6d\xef\xf2\x8f\x66\x42\x90\x54\x44\x2f\x0b\x4b\xcf\x49\xa3\x08\x94\x6b\xbc\x65\x89\x03\xa2\xfc\xd9\x22\xcd\x80\xad\xcb\x72\xfa\x69\xcf\xb3\x44\x34\xfd\x37\x8b\xee\xfb\xc4\x98\xf4\x66\x11\x2d\xbf\x0a\xe6\x47\x9c\x0a\x8b\x16\xdc\xb8\x08\xa2\x2c\xd4\xfc\xb7\x96\xc9\x98\xeb\x85\x0c\x56\x7a\x07\xd9\xe7\x0f\x49\x21\xb8\x3e\xa9\x13\xaa\x23\xd9\x63\x3e\x85\xf5\xbf\xa2\x35\x90\x9d\x0d\xdb\x27\xc1\x7e\xf0\xcf\x60\xda\xe7\x9f\xe9\x56\x8a\x40\xb1\xe2\x32\xb8\x6e\xb0\xc8\x35\x6d\x22\x60\xa2\x81\x7a\xff\x40\x3d\x39\x50\xa4\x85\x84\x44\x41\xfd\x13\x5f\x63\xbb\x8e\xe8\xff\xf6\xea\x97\xd5\xf8\x7c\x3f\x41\xdd\xa3\x2f\xe6\x52\xff\x58\xac\x4a\x7f\x51\x55\xfa\x10\x55\x7a\xac\x4a\xd3\x40\x70\xe2\x25\x7f\x5d\x97\x51\x8e\x26\xfa\xa7\x34\x11\xd6\x59\xb8\x0f\xbe\xe1\x37\xbd\x01\x53\x3f\x83\x0e\x7a\x8f\x48\x99\x5e\xa7\x76\xca\xf0\xf0\xd5\x2b\x58\xd3\xc2\x23\xc1\x91\x93\xef\x8b\xc0\x5d\x40\x0e\xa9\x64\xf9\x5a\x18\x5b\xd0\x7b\xf8\xbf\xde\x87\x9f\x76\xee\x5e\x3c\x75\xfc\xc8\xf6\xbd\xd5\xad\xa7\xb7\xbc\x3f\x7e\xe6\x5d\xfa\xaa\xf3\xe4\xe6\xc2\xb1\xf7\x67\xbd\x7b\xdf\x78\xf7\x57\x7f\x5c\xbd\xe0\x7d\x79\xe1\x6f\xdf\xdf\xed\xe6\x30\xb1\x55\x09\x79\xaa\xe5\xaa\xac\xa4\x59\xee\x8f\xab\x1f\x74\xfb\x6a\xcb\x96\xab\x5a\xae\xe5\xaa\x04\x73\xa9\xdd\x34\x09\x53\x1d\x8a\x96\xfd\x6c\xe7\x7f\x3b\xb7\xdc\xf0\x71\x7b\xde\xd7\x42\x73\xf5\xe7\x35\x57\x7f\xb6\xb9\x7a\x9a\xb9\x0d\x5d\xf5\x2d\xb6\x91\x76\x86\x39\x44\xea\x61\x2e\xc6\xa6\x4a\x70\x5d\x57\xb1\x59\x17\x24\xac\x82\xf9\xc2\x31\xd5\xad\x46\x66\xf7\x05\x89\xfc\x8d\x5f\x0e\x92\xfe\x30\x7c\x46\xb4\xa4\xc3\x3d\x30\x3a\x46\x0b\xae\x6e\xb4\xec\x24\x58\xfa\xeb\x18\x16\x8e\x75\x3f\x6c\x78\xf7\x1e\x79\x9f\xdf\xf5\xd6\x9e\x78\x1b\x5f\x76\xee\x5e\xdc\xfa\x76\xbd\x73\xeb\xcf\xde\xa7\x8f\x5a\x1b\x5f\x07\x6c\xe5\x79\xa1\x4e\x57\xb6\xfd\xf8\xce\xd6\xda\xe7\x81\xc4\xce\x57\x5f\x05\xdf\x73\x63\xe8\xb3\xad\x8d\xd5\xad\xcb\x5f\xb5\x36\x36\xb7\xef\x7f\xd6\xda\xf8\x4b\xfb\x0f\x7f\xed\xdc\xbd\x28\xfa\x27\x22\xcc\x12\xb9\x38\x72\x63\xa2\x14\xa1\x3f\x39\x27\x0c\x1e\xe6\x7b\x5c\x73\xf9\x72\xb4\x7d\x58\xe5\x94\x73\x15\x91\x55\x83\xd6\x5f\x32\x87\x80\x02\xf8\xe5\x89\xf7\x8e\xaa\x2e\xa2\x0c\xf7\x9d\x68\x94\x1d\x0a\xb2\x7e\x1a\x2e\x4c\x1d\x04\x56\x3e\x9e\xa7\xda\x98\x54\x78\xf5\x20\xb0\xde\x78\x23\x79\x58\x30\x8a\x99\xc8\x75\x31\x31\xb3\x89\x23\x86\xdf\xe6\x1d\xd7\x8f\xd8\x80\xaa\x65\xc6\x57\x62\x6d\xbf\xb6\x7e\x13\x10\x89\x4c\xf2\xb8\x32\x75\x4c\xb6\xb7\xf5\x90\x69\x52\xcc\xd8\xaf\xa7\x7e\xd3\x9c\xe8\x39\xd7\x0c\x54\x16\x7f\x2b\x35\x4b\x87\x1a\xf1\x91\x86\xa6\x81\xed\xd5\x2b\xad\x8d\xaf\xa3\x16\x11\xc9\x30\xda\xb7\x64\x0c\x9b\x4d\x18\x1c\x3e\xc1\xe7\x77\x8c\xd8\x48\x07\x4a\x9d\xe8\x33\xac\xef\xb4\xa9\x6f\x39\x27\x23\x3b\xcf\x5c\x44\xc2\xa3\xce\x8c\xe1\xd8\x0e\x9d\x03\x14\x9b\x99\x62\xfb\xff\x1e\xb6\xef\x5d\x69\x5f\xf9\xc1\xbb\xfc\x8d\x77\x7d\x5d\x84\xf8\xdd\x8b\xc1\x0a\xc8\x6b\x62\x52\x31\xd2\xde\x94\xe9\x40\xbc\xc3\xe7\x35\xa1\xa2\xf8\xff\x01\x00\x00\xff\xff\xcb\x12\xed\xc6\xcc\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17612, mode: os.FileMode(493), modTime: time.Unix(1608786816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
