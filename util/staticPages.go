// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x8a\x2f\xb9\xad\xda\xda\x62\x5b\x33\x2d\x69\xf0\x68\x66\xe8\x6e\xc9\x18\x95\xaa\x1c\x16\x12\x48\x41\x80\x3b\x96\x25\x2c\x84\xe5\x2e\x49\x71\x77\x89\x9d\xbd\xda\xda\x38\x26\x84\x3f\x26\x1a\xc9\xfe\x69\xff\x85\xab\x9e\xaf\x3d\xd2\x08\x09\x6c\xb3\x84\xe5\x07\x6b\xa6\xbf\xbc\xf7\xe6\x7d\x5e\xbf\xfe\x4c\xcf\xa3\x50\x63\x75\x13\x98\xc8\xaa\x16\xe1\xf9\x1a\x2c\x4d\x4c\x14\x6a\x18\xe9\xa5\x09\x00\x0a\x75\xcc\x10\xd0\x6a\x88\x50\xcc\x8a\xb0\xc1\x2a\xd2\x01\x18\x77\xd4\x18\x73\x24\x7c\xb6\x61\x34\x8b\xf0\x57\xd2\xa9\x43\xd2\x61\xbb\xee\x20\x66\x94\x4d\x0c\x81\x66\x5b\x0c\x5b\xac\x08\x17\xdf\x2a\x62\xbd\x8a\x85\x79\x16\xaa\xe3\x22\x6c\x1a\x78\xd9\xb1\x09\x13\x86\x2e\x1b\x3a\xab\x15\x75\xdc\x34\x34\x2c\x79\x37\x53\xc0\xb0\x0c\x66\x20\x53\xa2\x1a\x32\x71\x71\x66\x40\x0c\x6a\xb0\x9a\x4d\x04\x21\x67\x8c\x40\x17\x33\x98\x89\x4b\x0b\x0b\x47\x4f\x48\x6f\xbf\x57\x50\xfc\xdb\x09\x00\x00\x28\x98\x86\xb5\x04\x08\x36\x8b\x90\xb2\x15\x13\xd3\x1a\xc6\x0c\x82\x1a\xc1\x95\x22\x54\x28\x43\xcc\xd0\x94\xb2\x6d\x33\xca\x08\x72\xa4\x39\x79\xbf\x3c\x2b\x6b\x94\xc2\x60\x3a\xd5\x88\xe1\x30\x40\x89\x16\x0f\x3f\x73\xb6\x81\xc9\x8a\x34\x2b\xef\x97\x67\xe4\xba\x61\xc9\x67\x28\x2c\x15\x14\x7f\xe8\x73\xa8\xd5\xec\x7a\xdd\xb6\x02\x6d\x05\xc5\x87\x62\xa2\x50\xb6\xf5\x15\xef\xa9\x78\x03\x26\x81\x40\xdd\x68\x02\xcd\x44\x94\x16\xa1\x85\x9a\x65\x44\x80\xff\x23\xe9\x88\x2c\x81\x72\xd5\xff\xa5\x35\xa4\xdb\xcb\x12\xad\x07\xf6\x27\x27\x72\xc7\x21\xc3\xc2\x04\xe8\x52\xc5\xc4\xe7\xc0\x99\x06\x65\x46\x65\x45\x0a\x3c\x2a\x95\x31\x5b\xc6\xd8\x8a\x26\x03\x50\x40\x80\x21\x52\xe5\x31\x51\x36\x91\xb5\x14\x3e\x03\x0f\x08\x3a\xaf\x28\x55\x83\xd5\x1a\x65\x59\xb3\xeb\xca\x19\x8c\x29\x5d\xc9\x2b\xba\x6e\x51\xa9\x6a\xc3\xa4\xb9\x52\x99\x20\x4b\x0f\x15\x23\xd3\xa8\x5a\x92\xc1\x70\x9d\x4a\x1a\xb6\x18\x26\x82\x4e\xee\xf6\x66\x15\x9c\xab\x9b\x16\xf5\x35\xcd\x2b\xca\xf2\xf2\xb2\xbc\x3c\x2b\xdb\xa4\xaa\xe4\xa7\xa7\xa7\x15\xda\xac\x42\xe0\x47\x11\xcc\x4f\x43\x50\xc3\x46\xb5\xc6\xfc\xeb\x8a\x61\x9a\x45\x68\xd9\x16\x86\x80\x32\x62\x2f\xe1\x22\xd4\x1a\x84\x60\x8b\x1d\xb6\x4d\x9b\x40\x41\x15\x08\x46\x48\xa6\x61\x61\x0d\x39\x45\x48\xec\x86\xa5\x43\xb1\xf9\x8c\x6d\x58\xfd\xed\xa1\x6a\x08\x10\x31\x90\x54\x33\x74\x1d\x5b\x45\xc8\x48\x03\x47\x4f\x5e\x27\x52\x3e\xa9\x8b\xaf\x84\x37\xed\x73\x45\x38\x0d\xa6\x41\x7e\x0e\xe4\xe7\x20\xa8\xd8\x5a\x83\xa2\xb2\x89\x8b\xb0\x82\x4c\x8a\x13\x9e\x00\xa0\xe0\x20\x56\x03\x7a\x11\xbe\x9b\x9f\x05\x33\x3f\x47\x79\x90\x07\x7c\xf6\x8c\x94\x07\xf9\x77\x66\xc5\x7b\x29\xff\xfe\x81\xf8\x1e\xe4\xa5\x7c\x6d\xce\xcc\x4b\xb3\x35\xd5\xcc\x83\xd9\xda\x9c\xd8\x07\xf2\xe7\x21\x50\xfa\x54\x69\x06\xd1\x4c\x0c\xb4\x73\x45\x38\x93\x87\x40\x5b\x29\xc2\x99\x59\x08\x48\x11\xce\xf5\x0d\x2e\x70\x00\x92\x90\x31\x62\x5b\xd5\x78\x11\x06\xf7\x71\x24\x29\x28\x8a\x49\x45\x37\x9a\x41\x5c\x87\x97\x7e\xfc\xfb\xe1\xee\xad\x7b\x64\x58\x80\xd8\xdc\x2b\xfc\x92\xfb\x7d\xc5\xbf\x21\x55\xc3\x92\x98\xed\xcc\x83\x99\xfd\xce\xb9\x83\xc0\x6e\x62\x52\x31\xed\xe5\x79\xe0\x83\x70\x10\x0e\x2e\x19\x62\x2f\x0f\x59\x11\xa6\x54\xd7\x25\x15\xd8\x95\x0a\xc5\x8c\x5f\xcf\x8a\xd1\x5f\xb1\x49\xbd\x34\x21\x3e\x66\xb9\xc1\x98\x6d\x85\xf3\xcb\xcc\x02\x65\x66\x49\x0e\x31\xea\x88\xac\x00\xda\x28\xd7\x0d\x76\xba\xcc\x06\x0c\x2e\xdb\x8c\xd9\xf5\xc0\x66\x58\x3a\x81\x9a\xb8\xa0\xf8\xc2\x92\x0a\x04\xeb\x90\x89\x09\x03\xde\x5f\x89\x36\x34\x0d\x53\x1a\x89\xd5\x0d\xea\x98\x68\x65\x1e\xf0\x30\x3f\xd8\x1f\x33\xbe\xf3\x81\xa1\x17\x21\xc1\xb4\x61\xb2\x77\x69\x15\x96\x3a\x4f\xef\xbb\x5f\xdf\xe9\x5e\xbe\xe1\x7e\xfc\x60\x10\xa0\x08\x8c\x21\xd6\xf0\x0c\x6e\x62\xd6\xaf\xaa\xb6\xbf\x6f\xc0\xe9\xd3\x1c\x49\x58\x5a\x38\x7a\xa2\x7b\xef\x9a\xfb\xf1\x43\xf7\xf7\x1f\x16\x94\xda\xfe\xbe\x79\x83\x92\x4f\x9f\xe6\xa9\x0f\x26\x0c\xe8\x1f\xca\x01\x91\xaa\xc4\x6e\x38\x40\xc4\x54\x18\x6c\xa2\x32\x36\x45\x7c\x69\x5d\xca\x03\x7e\xe1\xcd\xf5\xba\x79\xba\xf6\x2e\x52\xe6\xf7\x45\x07\xad\x4b\x33\xd3\x29\x7a\x52\xcc\xd2\x6a\x58\x5b\x02\xf1\xa5\x64\x58\x3c\x7b\x0c\xe8\x4e\x91\x05\x40\xc1\xb0\x9c\x06\x1b\x94\x27\x79\xed\x10\xb0\x15\x07\x17\x21\x41\xba\x61\xc3\x60\x3f\x5c\xb0\xe8\x51\x54\xc7\xd0\x83\x19\x99\x86\x6e\x51\x08\x9a\xc8\x6c\xe0\xf8\xd6\xb6\x34\xd3\xd0\x96\xc2\x86\xc3\x5c\x24\xd6\xff\xa5\x61\x65\x73\x10\xb4\x5a\x46\x05\xe0\xb3\x60\x52\x5e\x38\x7a\x42\xe6\xb2\x40\x38\xb1\xdd\xd6\xfc\xa1\xad\x16\xb6\xf4\x76\x7b\x88\xd1\x09\x67\x0b\x46\xfb\x4f\xca\x7d\x11\x99\x92\x2e\x01\x80\x43\x5e\x77\x76\xfb\xce\xd3\xed\x8f\xae\x76\x36\x6f\xe6\xd2\x35\x0d\xc3\x2b\x91\x4d\x5e\x65\x80\x74\x8b\x3a\xb6\x1e\x01\x14\xde\x46\x00\xf9\x0d\xa3\x01\x0a\x26\xee\x22\x40\x81\xc4\x61\x00\x2d\x78\xdd\xd9\xad\x4b\x3f\x6c\xad\xad\xbf\xc6\x00\x69\xa6\xdd\xd0\x2b\x26\x22\x38\x02\x49\x6c\x8a\x80\x8a\x1b\x47\x83\x25\x08\xd8\x45\xc0\x04\xa9\xc3\x40\x3b\x1c\x0d\x79\x4d\xd1\xaa\x35\xd0\x32\x36\x3c\x4f\x44\x70\x25\xda\x22\xbc\x84\xd6\xd1\x80\x89\x22\x76\x11\x31\x51\xec\x30\xc8\xdc\x6b\x9f\x74\x36\x36\x3b\x9b\x37\x77\x0f\x31\x5a\x47\xa6\x19\x66\x9f\xd3\x35\x6c\x3a\x30\x61\x28\xc3\xe7\x18\xe0\x7f\xa4\x7a\x83\x61\xdd\x7b\x8b\xe1\x53\x52\xb6\xc5\x34\x1d\x83\x7c\x01\xbc\xe0\x76\xed\x39\x69\xc1\xa2\x8b\x0b\x51\xb2\x5c\xd4\x8f\xf8\x0e\x1c\xb5\x95\x2f\x2e\xec\xc6\x66\x9e\x12\x8e\xb6\xc5\x88\x6d\x0a\xd1\x17\x5a\x17\x5c\x06\x51\xd7\x6a\x79\xf1\xb3\xb8\xd0\x6e\xa7\x3d\xe0\xcb\x71\xdc\x09\xac\x11\xfe\x86\x19\x38\xcf\xbf\x1d\xd3\x81\xfe\xe0\x97\xe5\x44\xd1\x52\xe1\x36\xe9\x4c\xbf\x75\x67\x0e\x1d\x18\xb8\xbb\xf4\x76\xf1\xd8\xfb\x73\x2f\x9d\xd6\x7a\x70\x1b\x4e\x73\xee\x34\xb6\x90\x7f\xf8\x92\x04\x17\x96\xba\x77\xd6\xdd\x1b\x5f\xba\x37\xd6\x7b\xb7\x1e\xed\x1e\xa6\x7e\x3a\xf6\x12\x5b\xd9\x3e\x07\x53\xf3\x36\x4f\xfe\xa9\xef\x69\xde\x2b\x8f\x07\x78\xc2\x74\x3f\x24\x16\x9d\xe6\xdc\x5b\x41\x4b\x9c\x91\x79\xab\xec\x37\x03\xfe\x4e\x3d\x3a\x17\xbf\x8c\x85\xe6\x99\xdf\x20\x63\xac\xa9\xad\x4f\xbe\x75\xaf\xdf\x5e\x3c\xd6\xbd\xfd\x9d\xfb\xfd\xf5\x97\xf8\xb6\xb1\x7b\xdb\x2d\x87\xe0\x6d\xcc\x4e\xae\x38\xc1\x96\xdb\x20\xe6\x71\x3e\x80\x77\x44\x0b\xd6\xf3\x86\x87\x9b\x85\x81\x0f\x5b\x30\x09\x40\x0b\xb3\x45\x8b\x61\x52\x41\xda\x20\xff\x89\x37\xe8\x06\x31\x0f\xf3\xab\x6c\x86\xfb\x37\x93\x1b\xf6\x08\xe3\x6c\xb4\x09\x1b\x4b\xdb\xab\x77\xb7\x9e\x7e\xd4\xfd\xe4\x0b\xf7\xfa\x7f\xf9\x88\xec\x25\xf1\xd9\x43\xd7\x8b\x9e\x1c\xc4\x20\xe1\xe7\x68\x11\xbd\x18\x18\xe2\xb0\x5d\x43\x25\xdd\xfc\x00\x9e\xde\x93\x9b\xee\xb5\x87\x3b\x80\x47\xcc\x50\xe2\xe2\x4c\xdb\x80\xb8\xe2\x53\x7c\x4c\x94\x8d\xbc\x19\xde\x19\x9e\x8e\xa9\x46\x8c\x32\xd6\xcb\x2b\x71\x5f\xc0\x9a\xe2\xed\xc9\xf3\xea\xa9\xe3\x47\x52\x37\x27\xce\xb9\xb0\x89\xb5\x21\x9b\x60\xa4\x54\x74\xc8\x69\x7f\x86\x68\xe1\x51\x11\x2b\x4e\xca\xbc\x11\x23\x28\x5e\x9f\xc5\xaf\x2e\xcf\xf3\x0c\xd5\xed\x3a\x32\x2c\x3a\x3a\x93\x2e\xf8\x03\x77\x23\x85\x72\x0f\x20\x82\xd1\x08\x70\x22\xd3\x62\x40\x16\xc2\x26\x62\x2f\xd3\x22\x9c\x1d\x1a\x31\xc1\x5c\x1f\x83\xd2\x44\xab\x25\x01\x82\xac\x2a\x06\x93\xc6\x14\x98\x6c\x82\xf9\x62\xb0\x2e\x03\x89\xed\xf6\x44\xab\x35\xd9\xf4\x7e\x24\x80\x2d\x1d\x48\xed\x76\x6a\xf4\x87\xc6\x8f\x13\x05\x09\x2b\x9e\x1d\x09\x9d\x8d\xd5\xad\x87\x57\x3b\x1b\xab\x9d\x8d\xff\x71\x1f\x3c\x70\x6f\x5c\xdb\x79\x6c\xec\x3d\xf3\x52\x9f\x8f\x79\x25\x4d\xde\xc5\x38\x56\x7f\xba\x3c\x4c\x1d\xe4\x61\x6a\x2a\x0f\x53\x5f\x49\x1e\xa6\xfe\x23\xf1\x30\x75\x18\x0f\x53\x87\xf3\x30\x75\x67\x3c\x4c\xdd\x35\x1e\xa6\xfe\xa4\x79\x98\x3a\x92\x87\xa9\x63\xf0\xb0\xe7\x07\x23\x9d\x87\xed\x10\x95\x74\xf3\x5f\x2e\x0f\x8b\xd2\x8f\x37\x24\xf6\xf3\xa9\xa1\x3c\x4c\x1d\xc6\xc3\xd4\x1d\xf2\x30\x75\x04\x0f\x53\x5f\x94\x87\xa9\x3f\x15\x1e\xa6\xbe\xba\x3c\x4c\x4d\xe1\x61\xea\x98\x3c\x4c\x1d\x97\x87\xa9\x7b\xc9\xc3\xd4\xd7\x9c\x87\xb9\x97\xfe\xea\xae\xfd\x6e\xfb\xd2\xb5\xde\x93\xb5\x57\x81\x8f\x9d\xa2\x98\x58\xde\x07\x82\x51\xb1\xdc\xfb\xf4\xb1\xfb\xe4\xf7\xbd\x5b\x8f\xba\x97\xbf\xf5\x3c\xfd\x12\x8e\x3e\x63\xeb\x78\x78\xc4\x77\x71\x46\x0b\xdb\xda\xed\xb4\xb0\x0e\x7b\xc3\x90\x4e\xb1\x21\x8e\xbe\xe4\xe0\x51\x91\xb7\xd9\x79\x7a\xbf\xfb\xf1\xe7\x9d\x27\x7f\xea\xdd\xbd\xd8\x79\xfa\xb0\xfb\xc1\xba\xbb\x76\xc5\xbd\xf4\x68\x0a\xb8\x8f\x37\xb7\xd6\xd6\xb6\x7e\xf8\x0f\xf7\xd2\x17\x7f\xd7\x64\x75\x0c\x51\xba\x6c\x13\x7d\x5c\x70\xdd\xf5\x0f\x7b\x7f\xfa\x60\x8f\x91\xf5\xf7\x3a\x27\x32\xcd\x47\x3a\x36\x95\x43\x11\xdf\xc5\x48\x87\x6d\xe9\x48\x87\xf2\xc6\x42\x3a\x39\xf8\x95\x41\x7a\x8f\x53\xcf\xbf\xe1\x72\xcd\xb6\x97\x5e\x85\xac\x13\x98\x72\xea\xf8\x91\xd1\xa1\x79\xea\xf8\x91\x97\x92\x6b\x44\x9b\x78\x90\x88\xf7\x71\x14\xc6\xad\xe9\x71\x18\xf7\x8f\x15\x89\xfd\xc3\x9f\x1d\x8b\xe9\x24\xf6\x85\xab\x0d\xf7\x2d\xfb\xda\x61\xa9\x77\xe1\x3b\xf7\xa3\xc7\xee\xf5\x0b\x5b\xab\xbf\x73\xd7\xee\x74\x6f\x7f\x17\x18\xb6\xb5\xfe\x97\xee\x9d\x4f\x0a\x0a\x2a\x15\xca\x44\x49\x37\xa0\x7b\x6b\xbd\x7b\xf5\x83\xde\xdd\x8b\xee\xf5\x3b\xdb\x1f\x5d\xdf\xd7\x32\x9c\xe6\xdc\x21\x5d\x27\xed\x29\xe0\xdf\x1c\xf7\xca\xa9\xa2\xdb\x90\x3e\x04\xf7\xaa\x38\x56\x4d\x8e\x0d\xc9\x4b\x3a\xad\xf8\x3b\xa6\xd6\xc0\x3f\xc7\xf1\xd9\x06\xa6\xec\x4d\xbe\x58\x46\x46\xb2\x30\xf8\xe5\x30\xc2\x34\x23\x13\xc1\x9e\xe8\x79\x06\x3d\x1c\x1c\x2e\x92\x44\x79\xb0\x7b\xa7\x4c\x70\x98\xc2\x17\x58\x1f\x82\x8c\xce\xc6\x66\xef\xbf\x37\xdf\x7e\xeb\xe4\xd6\xfa\xb7\xdd\x3f\x5f\xf8\xdb\xf7\x57\x3b\x1b\xd7\xfc\xc6\x63\xef\x9d\x08\x5a\x7f\x5c\xbd\xd0\x17\xd1\xee\x8d\xab\x9d\x8d\x8f\xf7\x24\x02\xc7\x49\xf9\x7b\x5b\x3d\x59\x50\xfc\x7a\xcd\x14\x7b\x52\x8a\x3e\x13\x85\x9e\x4e\x8c\x86\xc5\xa4\x65\xaf\x98\x58\x32\xf9\x5f\x1f\x95\x32\xc1\x68\x29\xbd\x08\xd5\xb3\xc9\x9b\x46\x8d\xf3\x78\x1e\xcc\xcc\x46\xc7\x6c\xa6\x5d\xf5\x4a\xc3\x9d\x14\x9b\x84\xca\x57\x9e\x16\xbc\xc7\x28\x88\x35\xe4\x93\xd9\x4a\xc3\xd2\x98\x61\x5b\xd9\x5c\x2b\x98\x3f\x99\x85\xb2\xe0\xa5\x9c\x6c\x5b\xd9\x8c\x77\x62\x90\x99\x8a\x46\xe3\x1c\x68\x45\x4f\x86\x65\x87\xe0\x26\xb6\xd8\x02\xae\xa0\x86\xc9\xb2\xb9\x83\x51\xdf\x64\x36\xc3\xb7\xc6\x4c\x4e\x46\x96\x51\x47\x0c\x67\x5b\x80\x6a\xc4\x36\xcd\x93\xfc\xc9\xa6\x41\x7b\x0a\xcc\x4e\x4f\x8b\x33\x64\x74\x06\x9d\xcb\xb6\x04\x4c\xeb\x98\xd5\x6c\x7d\x1e\x40\x1e\x76\x70\x4a\xe8\x69\x10\x73\x1e\x40\x85\xa2\x26\x4e\xb4\xeb\x88\xa1\x79\xae\x9c\xa3\x95\xc9\xc9\x14\x13\x03\x99\xc6\x79\x9c\xcd\x89\xc3\x82\x8a\xd7\x79\x10\x3e\x18\xc8\xfa\xb5\xac\xe2\xe3\x05\x8f\x21\x7b\x45\xb2\x99\x9c\xac\x51\x9a\x0d\x6b\x63\xe1\x14\x80\x65\xd3\xd6\x96\xa0\xf0\x04\xfc\x9f\x51\x09\x45\x81\x7f\x2a\x16\x01\xb4\x97\x60\xbf\xcc\xa4\x54\xa4\xeb\x87\x79\x78\x64\xfd\x92\x5c\x49\xe7\xaf\x92\x04\xf6\x57\xc2\x4d\x66\x33\xfb\xa2\x72\xdb\x4c\x4e\xae\xb1\xba\x19\xda\x9c\x18\xda\x06\xd8\xa4\x78\x40\xa5\xa2\x00\x7b\xa9\xaf\x8d\x62\x76\xd2\xa8\x63\xbb\xc1\x52\xc2\x61\x3c\x1f\x78\x85\xf0\x7d\x2e\x00\x01\xb6\xd3\x7d\x86\x4d\x88\x03\x84\x1b\x4c\x88\x4d\x62\x28\xb2\x67\xce\xfe\xea\x9d\xe3\xfd\x4e\xf3\x0c\xf0\xbb\x64\xca\x10\x6b\xd0\x93\xf8\x1c\x4b\x68\x8e\x15\xb4\x43\xcd\xed\x9c\xbf\x82\xc3\xdf\x26\x22\xa0\x8c\x2b\x36\xc1\x5e\x9d\x4d\x11\x42\xbf\x3d\x0a\x83\xc1\x52\xd6\xc8\x0e\xdd\xd6\x1a\x75\x6c\x31\xb9\x8a\xd9\x5b\x26\xe6\x97\x6f\xae\x2c\xea\xd9\xa0\x64\x27\x27\xeb\x86\x57\x6a\xaf\x17\x81\x57\x6b\x1f\x4c\xe3\x01\x21\xa8\x8c\x7d\x32\x52\x9e\xcf\xa6\x44\x7b\x27\x46\x99\x22\xd4\x36\xe5\x64\xc3\xb2\x30\x79\xe7\xe4\xbb\x47\x40\x11\xc0\x43\x5e\xc0\xff\x2b\x5e\x01\x8b\x0b\x70\x0c\x31\x62\x95\xcf\x50\x51\x41\x81\xcd\x18\xe2\xfc\x6d\xa9\x4f\x50\x4c\xc9\x32\xa7\x3d\x4e\x96\xf1\x39\x59\x26\xe4\x64\x04\xd5\x65\xcd\xb6\xa8\x6d\x62\x19\x99\xc6\x4a\xc3\xf2\xf8\x59\x1d\x59\xa8\x8a\x15\xb4\xf4\x0b\xea\xd4\x8b\xfb\x67\x7e\xa6\xca\x33\xf9\x03\x33\x07\xa6\x7f\x3e\x2b\x5b\xa8\x29\x11\x9e\x5b\x65\x1d\x2d\xc9\x73\x07\x0e\xfc\x6c\x46\xd5\xa7\xeb\xef\xa0\x77\xab\xd5\x4c\xc9\xbd\xfc\x47\xf7\xf1\x26\x88\x9e\x80\x33\x36\xdf\xfc\x76\x5f\x20\x0c\x96\xcc\xbe\x26\x81\xb0\x63\xf8\x4f\xda\x4b\xd8\xda\x3b\xcc\x43\xbc\x7d\x00\x64\xcd\x52\x90\xa6\xd9\x0d\x8b\x29\x8c\x2b\x0e\x31\x74\xd7\x3f\xdc\xfe\xf7\x2f\x86\xe3\x97\x5e\x49\x3b\x1a\xc3\xe1\x8e\x0b\x1f\x59\x80\x01\x14\xc7\x04\xef\xf9\x23\x87\x91\xf1\x67\x05\xf1\x01\x5f\x6d\x60\x75\x44\x6b\x72\x0c\x8b\xb7\x92\x1d\x62\x57\x0c\x13\x2b\xc8\x31\x24\x0f\x5e\x1a\xe2\xdb\x79\xfc\x79\xef\xca\x55\xa9\xd4\xfb\xfe\xf6\xd6\x0f\x37\xdd\xab\x9b\xee\x83\x07\x60\xe1\xe8\x89\x6c\xe7\xc9\xd3\xde\xad\x47\xdd\x47\x0f\xbb\xf7\x9f\xe6\x86\xe3\x3f\xa4\x32\xf7\x35\x59\xc4\x7e\x02\x03\x5e\x3a\xd7\x77\x08\xbb\xdf\x05\x62\x91\x7b\xbf\xb6\x05\x70\xbc\x30\x30\x50\x5d\xf9\x85\x69\x7b\xff\x37\xf3\x7c\x4d\xd2\xac\x7d\x4a\xdd\xb0\x30\x5f\xf9\x7e\x9e\xce\x94\xba\xb7\xbf\x71\xff\xf3\xb3\xad\xb5\xa7\xdb\x7f\x58\x1b\xb2\xf6\xf9\xe6\xae\xfb\x75\xdc\xa0\x08\x32\xad\x56\x5c\x7c\xdd\x6e\x67\xfc\x31\x74\xd9\x60\x5a\x2d\x1b\x0c\x8b\xc8\x8e\x86\x68\xfc\xdf\x1f\xe6\x05\xea\x31\xb8\x0d\x44\x5d\x1e\x6d\x0f\xf9\x47\x3b\x21\x48\x28\xa2\x17\x85\xa5\xe7\xa4\x71\x04\x8a\x35\xde\xa2\xc4\x21\x51\xfe\x6c\x91\xba\xcf\xd6\x45\x39\x83\xb4\xe7\x59\x22\xda\xde\x9b\x45\xf8\x3e\x31\x21\xbc\x59\x44\xcb\xaf\x8a\xd9\x11\xbb\x4a\xa3\x05\x37\xc9\x83\x28\x0b\x15\xef\xad\x65\x2a\xe6\x7a\x01\x83\x15\xde\x41\xf6\x79\x43\x52\x08\xae\x47\xea\xb8\xea\x48\xf6\x84\x47\x61\xbd\xaf\x68\x4d\x64\x66\x83\xf6\x29\xb0\x1f\xfc\x33\x98\xf1\xf8\x67\xba\x95\x3c\x50\x8c\xb8\x0c\x2e\x0c\x16\xb1\xa6\x8d\x07\x4c\x34\x50\x1d\x1c\xa8\x26\x07\xf2\xb4\x90\x90\xc8\xa9\x7f\xe2\x6b\x6c\xe8\x88\xc1\x6f\xaf\x5e\x59\x8d\xc7\xf7\x13\xd4\x3d\xfa\x62\x2e\xf4\x4f\xc4\xaa\xd4\x17\x55\xa5\x8e\x50\xa5\xc6\xaa\x14\x05\xf8\x27\x5e\xe2\xd7\x75\x11\xe5\x68\xa2\x77\x4a\x13\x61\x9d\x85\xfb\xe0\x1b\x5e\xd3\x1b\x30\xf5\x33\xe8\xb0\xf7\x88\x94\xe9\x0d\x62\xa6\x0c\x0f\x5e\xbd\xfc\x35\xcd\x3d\xe2\x1f\x39\x79\xbe\xf0\xdd\x05\xc4\x90\x4a\x96\xaf\x05\xb1\x05\xdd\x87\xff\xeb\x7e\xf8\x69\xef\xee\xc5\x53\xc7\x8f\x6c\xdf\x5b\xdd\x7a\x7a\xcb\xfd\xe3\x67\xee\xa5\xaf\x7a\x4f\x6e\x2e\x1e\x7b\x7f\xce\xbd\xf7\x8d\x7b\x7f\xf5\xc7\xd5\x0b\xee\x97\x17\xfe\xf6\xfd\xdd\x30\x87\xf1\xad\x8a\xcb\x93\x0d\x47\xa6\x65\xc5\x70\x7e\x5c\xfd\x20\xec\xab\xaf\x18\x8e\x6c\x38\x86\x23\x5b\x98\x09\xed\xba\x6e\x51\xd9\x26\x68\xc5\xcb\x76\xde\xb7\x73\xc3\x09\x1e\xb7\xef\x7d\x2d\x30\x57\x7d\x5e\x73\xd5\x67\x9b\xab\xa6\x99\xdb\x54\x65\xcf\x62\x13\x29\x67\xa8\x6d\x09\x3d\xd4\xc1\x58\x97\x2d\xdc\x50\x65\xac\x37\x38\x09\xab\x62\xb6\x78\x4c\x76\x6a\x91\xd9\x03\x41\x22\x7e\xe3\x17\x83\x64\x30\x0c\x9f\x11\x2d\xe9\x70\x0f\x8d\x8e\xf1\x82\x2b\x8c\x96\x9d\x04\xcb\x60\x1d\xc3\xe2\xb1\xf0\xc3\x86\x7b\xef\x91\xfb\xf9\x5d\x77\xed\x89\xbb\xf1\x65\xef\xee\xc5\xad\x6f\xd7\x7b\xb7\xfe\xec\x7e\xfa\xa8\xb3\xf1\xb5\xcf\x56\x9e\x17\xea\x74\x65\xdb\x8f\xef\x6c\xad\x7d\xee\x4b\xec\x7d\xf5\x95\xff\x3d\x37\x86\x3e\xdb\xd9\x58\xdd\xba\xfc\x55\x67\x63\x73\xfb\xfe\x67\x9d\x8d\xbf\x74\xff\xf0\xd7\xde\xdd\x8b\xbc\x3f\x17\x61\x96\xc8\xc5\x91\x1b\x13\xa5\x08\x83\xc9\x39\x61\xf0\x28\xdf\xe3\xba\xc3\x56\xa2\xed\xc3\xa8\xa4\x9c\xab\xf0\xac\xea\xb7\xfe\x92\xda\x16\x28\x82\x5f\x9e\x78\xef\xa8\xec\x20\x42\xf1\xc0\x89\x46\xc5\x26\x20\xeb\xa5\xe1\xe2\xf4\x41\x60\x14\xe2\x79\xb2\x89\xad\x2a\xab\x1d\x04\xc6\x1b\x6f\x24\x0f\x0b\xc6\x31\x13\x39\x0e\xb6\xf4\x6c\xe2\x88\xe1\xb7\x05\xdb\xf1\x22\xd6\xa7\x6a\x99\xc9\x56\xac\xed\xd7\xc6\x6f\x7c\x22\x91\x49\x1e\x57\xa6\x8e\xc9\xf6\xb7\x1e\xd2\x75\x82\x29\xfd\xf5\xf4\x6f\xda\xb9\xbe\x73\x4d\x5f\x65\xe9\xb7\x42\xb3\x70\xa8\x11\x1f\x69\x28\x0a\xd8\x5e\xbd\xd2\xd9\xf8\x3a\x6a\xe1\x91\x0c\xa3\x7d\x4b\xc4\xb0\xdd\x86\xfe\xe1\x13\x7c\x7e\xc7\xf0\x8d\x74\xa8\xd4\xdc\x80\x61\x03\xa7\x4d\x03\xcb\x39\x19\xd9\x05\xea\x20\x2b\x38\xea\xcc\x68\xb6\x69\x93\x79\x40\xb0\x9e\x29\x75\xff\xef\x61\xf7\xde\x95\xee\x95\x1f\xdc\xcb\xdf\xb8\xd7\xd7\x79\x88\xdf\xbd\xe8\xaf\x80\x82\xc2\x27\x95\x22\xed\x6d\x91\x0e\xc4\x3b\x7c\x41\xe1\x2a\x4a\xff\x1f\x00\x00\xff\xff\x1c\x06\x46\x9c\x89\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17545, mode: os.FileMode(493), modTime: time.Unix(1608789888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
