// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x8a\x2f\xb9\xad\xda\xda\x62\x5b\x33\x2d\x69\xf0\x68\x66\xe8\x6e\xc9\x18\x95\xaa\x1c\x16\x12\x48\x41\x80\x3b\x96\x25\x2c\x84\xe5\x2e\x49\x71\x77\x89\x9d\xbd\xda\xda\x38\x26\x84\x3f\x26\x1a\xc9\xfe\x69\xff\x85\xab\x9e\xaf\x3d\xd2\x08\x09\x6c\xb3\x84\xe5\x07\x6b\xa6\xfb\xf5\xeb\x37\xef\xf3\xfa\xf5\x67\x7a\x1e\x85\x1a\xab\x9b\xc0\x44\x56\xb5\x08\xcf\xd7\x60\x69\x62\xa2\x50\xc3\x48\x2f\x4d\x00\x50\xa8\x63\x86\x80\x56\x43\x84\x62\x56\x84\x0d\x56\x91\x0e\xc0\xb8\xa3\xc6\x98\x23\xe1\xb3\x0d\xa3\x59\x84\xbf\x92\x4e\x1d\x92\x0e\xdb\x75\x07\x31\xa3\x6c\x62\x08\x34\xdb\x62\xd8\x62\x45\xb8\xf8\x56\x11\xeb\x55\x2c\x8c\xb3\x50\x1d\x17\x61\xd3\xc0\xcb\x8e\x4d\x98\x20\xba\x6c\xe8\xac\x56\xd4\x71\xd3\xd0\xb0\xe4\xdd\x4c\x01\xc3\x32\x98\x81\x4c\x89\x6a\xc8\xc4\xc5\x99\x01\x35\xa8\xc1\x6a\x36\x11\x94\x9c\x31\x82\xb9\x98\xc1\x4c\x5c\x5a\x58\x38\x7a\x42\x7a\xfb\xbd\x82\xe2\xdf\x4e\x00\x00\x40\xc1\x34\xac\x25\x40\xb0\x59\x84\x94\xad\x98\x98\xd6\x30\x66\x10\xd4\x08\xae\x14\xa1\x42\x19\x62\x86\xa6\x94\x6d\x9b\x51\x46\x90\x23\xd7\x0d\x4b\xd6\x28\x85\xc1\x60\xaa\x11\xc3\x61\x80\x12\x2d\x16\x3e\x73\xb6\x81\xc9\x8a\x34\x2b\xef\x97\x67\x3c\xf9\x33\x14\x96\x0a\x8a\x2f\xfa\x1c\x93\x6a\x76\xbd\x6e\x87\xb3\x15\x14\x1f\x88\x89\x42\xd9\xd6\x57\xbc\x67\xe2\x0d\x98\x04\x0a\x75\xa3\x09\x34\x13\x51\x5a\x84\x16\x6a\x96\x11\x01\xfe\x8f\xa4\x23\xb2\x04\xca\x55\xff\x97\xd6\x90\x6e\x2f\x4b\xb4\x1e\xd8\x9f\x1c\xc8\xdd\x86\x0c\x0b\x13\xa0\x4b\x15\x13\x9f\x03\x67\x1a\x94\x19\x95\x15\x29\xf0\xa7\x54\xc6\x6c\x19\x63\x2b\x1a\x0c\x40\x01\x01\x86\x48\x95\x47\x44\xd9\x44\xd6\x52\xf8\x0c\x3c\x1c\xe8\xbc\xa2\x54\x0d\x56\x6b\x94\x65\xcd\xae\x2b\x67\x30\xa6\x74\x25\xaf\xe8\xba\x45\xa5\xaa\x0d\x93\xe6\x4a\x65\x82\x2c\x3d\x9c\x18\x99\x46\xd5\x92\x0c\x86\xeb\x54\xd2\xb0\xc5\x30\x11\xe6\xe4\x6e\x6f\x56\xc1\xb9\xba\x69\x51\x7f\xa6\x79\x45\x59\x5e\x5e\x96\x97\x67\x65\x9b\x54\x95\xfc\xf4\xf4\xb4\x42\x9b\x55\x08\xfc\x18\x82\xf9\x69\x08\x6a\xd8\xa8\xd6\x98\x7f\x5d\x31\x4c\xb3\x08\x2d\xdb\xc2\x10\x50\x46\xec\x25\x5c\x84\x5a\x83\x10\x6c\xb1\xc3\xb6\x69\x13\x28\x4c\x05\x02\x09\xc9\x34\x2c\xac\x21\xa7\x08\x89\xdd\xb0\x74\x28\x36\x9f\xb1\x0d\xab\xbf\x3d\x9c\x1a\x02\x44\x0c\x24\xd5\x0c\x5d\xc7\x56\x11\x32\xd2\xc0\xd1\x93\xd7\x89\x94\x4f\xce\xc5\xd7\xc1\x9b\xf6\xb9\x22\x9c\x06\xd3\x20\x3f\x07\xf2\x73\x10\x54\x6c\xad\x41\x51\xd9\xc4\x45\x58\x41\x26\xc5\x09\x4f\x00\x50\x70\x10\xab\x01\xbd\x08\xdf\xcd\xcf\x82\x99\x9f\xa3\x3c\xc8\x03\x3e\x7a\x46\xca\x83\xfc\x3b\xb3\xe2\xbd\x94\x7f\xff\x40\x7c\x0f\xf2\x52\xbe\x36\x67\xe6\xa5\xd9\x9a\x6a\xe6\xc1\x6c\x6d\x4e\xec\x03\xf9\xf3\x10\x28\x7d\x53\x69\x06\xd1\x4c\x0c\xb4\x73\x45\x38\x93\x87\x40\x5b\x29\xc2\x99\x59\x08\x48\x11\xce\xf5\x09\x17\x38\x00\x49\xc8\x18\xb1\xad\x6a\xbc\x04\x83\xfb\x38\x92\x14\x14\xc5\xa4\xa2\x1b\xcd\x20\xae\xc3\x4b\x3f\xfe\xfd\x70\xf7\x56\x3d\x32\x2c\x40\x6c\xee\x15\x7e\xc9\xfd\xbe\xe2\xdf\x90\xaa\x61\x49\xcc\x76\xe6\xc1\xcc\x7e\xe7\xdc\x41\x60\x37\x31\xa9\x98\xf6\xf2\x3c\xf0\x41\x38\x08\x07\x97\x0c\xb1\x97\x87\xac\x08\x53\xaa\xeb\x92\x0a\xec\x4a\x85\x62\xc6\xaf\x67\xc5\xe8\xaf\xd8\xa4\x5e\x9a\x10\x1f\xb3\xdc\x60\xcc\xb6\xc2\xf1\x65\x66\x81\x32\xb3\x24\x87\x18\x75\x44\x56\x00\x6d\x94\xeb\x06\x3b\x5d\x66\x03\x06\x97\x6d\xc6\xec\x7a\x60\x33\x2c\x9d\x40\x4d\x5c\x50\x7c\x65\xc9\x09\x04\xeb\x90\x89\x09\x03\xde\x5f\x89\x36\x34\x0d\x53\x1a\xa9\xd5\x0d\xea\x98\x68\x65\x1e\xf0\x30\x3f\xd8\x1f\x33\xbe\xf3\x81\xa1\x17\x21\xc1\xb4\x61\xb2\x77\x69\x15\x96\x3a\x4f\xef\xbb\x5f\xdf\xe9\x5e\xbe\xe1\x7e\xfc\x60\x10\xa0\x08\x8c\x21\xd6\xf0\xfc\x6d\x62\xd6\x3f\x55\x6d\x7f\x9f\xc0\xe9\xd3\x1c\x49\x58\x5a\x38\x7a\xa2\x7b\xef\x9a\xfb\xf1\x43\xf7\xf7\x1f\x16\x94\xda\xfe\xbe\x71\x83\x9a\x4f\x9f\xe6\xa9\x0f\x26\x0c\xe8\x17\xe5\x80\x48\x55\x62\x37\x1c\x20\x62\x2a\x08\x9b\xa8\x8c\x4d\x11\x5f\x5a\x97\xf2\x80\x5f\x78\x63\xbd\x6e\x9e\xae\xbd\x8b\x94\xf1\x7d\xd1\x41\xeb\xd2\xcc\x74\xca\x3c\x29\x66\x69\x35\xac\x2d\x81\xf8\x52\x32\x2c\x9e\x3d\x06\xe6\x4e\xd1\x05\x40\xc1\xb0\x9c\x06\x1b\xd4\x27\x79\xed\x10\xb0\x15\x07\x17\x21\x41\xba\x61\xc3\x60\x37\x5c\xb0\xe8\x51\x54\xc7\xd0\x83\x19\x99\x86\x6e\x51\x08\x9a\xc8\x6c\xe0\xf8\xd6\xb6\x34\xd3\xd0\x96\xc2\x86\xc3\x5c\x25\xd6\xff\xa5\x61\x65\x73\x10\xb4\x5a\x46\x05\xe0\xb3\x60\x52\x5e\x38\x7a\x42\xe6\xba\x40\x38\xb0\xdd\xd6\x7c\xd1\x56\x0b\x5b\x7a\xbb\x3d\xc4\xe8\x84\xb3\x05\xa3\xfd\x27\xe5\xbe\x88\x4c\x49\xd7\x00\xc0\x21\xaf\x3b\xbb\x7d\xe7\xe9\xf6\x47\x57\x3b\x9b\x37\x73\xe9\x33\x0d\xc3\x2b\x91\x4d\x5e\x65\x80\x74\x8b\x3a\xb6\x1e\x01\x14\xde\x46\x00\xf9\x0d\xa3\x01\x0a\x06\xee\x22\x40\x81\xc6\x61\x00\x2d\x78\xdd\xd9\xad\x4b\x3f\x6c\xad\xad\xbf\xc6\x00\x69\xa6\xdd\xd0\x2b\x26\x22\x38\x02\x49\x6c\x8a\x80\x8a\x1b\x47\x83\x25\x28\xd8\x45\xc0\x04\xad\xc3\x40\x3b\x1c\x89\xbc\xa6\x68\xd5\x1a\x68\x19\x1b\x9e\x27\x22\xb8\x12\x6d\x11\x5e\x42\xeb\x68\xc0\x44\x15\xbb\x88\x98\xa8\x76\x18\x64\xee\xb5\x4f\x3a\x1b\x9b\x9d\xcd\x9b\xbb\x87\x18\xad\x23\xd3\x0c\xb3\xcf\xe9\x1a\x36\x1d\x98\x30\x94\xe1\x73\x0c\xf0\x3f\x52\xbd\xc1\xb0\xee\xbd\xc5\xf0\x21\x29\xdb\x62\xda\x1c\x83\x7c\x01\xbc\xe0\x76\xed\x39\x69\xc1\xa2\x8b\x0b\x51\xb2\x5c\xd4\x8f\xf8\x0e\x1c\xb5\x95\x2f\x2e\xec\xc6\x66\x9e\x12\x8e\xb6\xc5\x88\x6d\x0a\xd1\x17\x5a\x17\x5c\x06\x51\xd7\x6a\x79\xf1\xb3\xb8\xd0\x6e\xa7\x3d\xe0\xcb\x71\xdc\x09\xac\x11\xfe\x86\x19\x38\xcf\xbf\x1d\xd3\x81\xbe\xf0\xcb\x72\xa2\x68\xa9\x70\x9b\x74\xa6\xdf\xba\x33\x87\x0e\x08\xee\x2e\xbd\x5d\x3c\xf6\xfe\xdc\x4b\xa7\xb5\x1e\xdc\x86\xd3\x9c\x3b\x8d\x2d\xe4\x1f\xbd\x24\xc1\x85\xa5\xee\x9d\x75\xf7\xc6\x97\xee\x8d\xf5\xde\xad\x47\xbb\x87\xa9\x9f\x8e\xbd\xc4\x56\xb6\xcf\xc1\xd4\xbc\xcd\x93\x7f\xea\x7b\x9a\xf7\xca\xe3\x01\x9e\x30\xdd\x0f\x89\x45\xa7\x39\xf7\x56\xd0\x12\x67\x64\xde\x2a\xfb\xcd\x80\xbf\x53\x8f\xce\xc5\x2f\x63\xa1\x79\xe6\x37\xc8\x18\x6b\x6a\xeb\x93\x6f\xdd\xeb\xb7\x17\x8f\x75\x6f\x7f\xe7\x7e\x7f\xfd\x25\xbe\x6d\xec\xde\x76\xcb\x21\x78\x1b\xb3\x93\x2b\x4e\xb0\xe5\x36\x88\x79\x9c\x0b\xf0\x8e\x68\xc1\x7a\xde\xf0\x70\xb3\x30\xf0\x61\x0b\x06\x01\x68\x61\xb6\x68\x31\x4c\x2a\x48\x1b\xe4\x3f\xf1\x06\xdd\x20\xe6\x61\x7e\x95\xcd\x70\xff\x66\x72\xc3\x1e\x61\x9c\x8d\x36\x61\x63\x69\x7b\xf5\xee\xd6\xd3\x8f\xba\x9f\x7c\xe1\x5e\xff\x2f\x1f\x91\xbd\x24\x3e\x7b\xe8\x7a\xd1\x93\x83\x18\x24\xfc\x1c\x2d\xa2\x17\x03\x43\x14\xdb\x35\x54\xd2\xcd\x0f\xe0\xe9\x3d\xb9\xe9\x5e\x7b\xb8\x03\x78\xc4\x0c\x25\x2e\xce\xb4\x0d\x88\x4f\x7c\x8a\xcb\x44\xd9\xc8\x1b\xe1\x9d\xe1\xe9\x98\x6a\xc4\x28\x63\xbd\xbc\x12\xf7\x05\xac\x29\xde\x9e\x3c\xaf\x9e\x3a\x7e\x24\x75\x73\xe2\x9c\x0b\x9b\x58\x1b\xb2\x09\x46\x93\x8a\x0e\x39\xed\x8f\x10\x2d\x3c\x2a\x62\xc5\x49\x99\x27\x31\x82\xe2\xf5\x59\xfc\xea\xf2\x3c\xcf\x50\xdd\xae\x23\xc3\xa2\xa3\x33\xe9\x82\x2f\xb8\x1b\x29\x94\x7b\x00\x11\x8c\x46\x80\x13\x99\x16\x03\xb2\x10\x36\x11\x7b\x99\x16\xe1\xec\xd0\x88\x09\xc6\xfa\x18\x94\x26\x5a\x2d\x09\x10\x64\x55\x31\x98\x34\xa6\xc0\x64\x13\xcc\x17\x83\x75\x19\x68\x6c\xb7\x27\x5a\xad\xc9\xa6\xf7\x23\x01\x6c\xe9\x40\x6a\xb7\x53\xa3\x3f\x34\x7e\x9c\x28\x48\x58\xf1\xec\x48\xe8\x6c\xac\x6e\x3d\xbc\xda\xd9\x58\xed\x6c\xfc\x8f\xfb\xe0\x81\x7b\xe3\xda\xce\x63\x63\xef\x99\x97\xfa\x7c\xcc\x2b\x69\xf2\x2e\xc6\xb1\xfa\xd3\xe5\x61\xea\x20\x0f\x53\x53\x79\x98\xfa\x4a\xf2\x30\xf5\x1f\x89\x87\xa9\xc3\x78\x98\x3a\x9c\x87\xa9\x3b\xe3\x61\xea\xae\xf1\x30\xf5\x27\xcd\xc3\xd4\x91\x3c\x4c\x1d\x83\x87\x3d\x3f\x18\xe9\x3c\x6c\x87\xa8\xa4\x9b\xff\x72\x79\x58\x94\x7e\x3c\x91\xd8\xcf\xa7\x86\xf2\x30\x75\x18\x0f\x53\x77\xc8\xc3\xd4\x11\x3c\x4c\x7d\x51\x1e\xa6\xfe\x54\x78\x98\xfa\xea\xf2\x30\x35\x85\x87\xa9\x63\xf2\x30\x75\x5c\x1e\xa6\xee\x25\x0f\x53\x5f\x73\x1e\xe6\x5e\xfa\xab\xbb\xf6\xbb\xed\x4b\xd7\x7a\x4f\xd6\x5e\x05\x3e\x76\x8a\x62\x62\x79\x1f\x08\x46\xc5\x72\xef\xd3\xc7\xee\x93\xdf\xf7\x6e\x3d\xea\x5e\xfe\xd6\xf3\xf4\x4b\x38\xfa\x8c\xad\xe3\xe1\x11\xdf\xc5\x19\x2d\x6c\x6b\xb7\xd3\xc2\x3a\xec\x0d\x43\x3a\xc5\x86\x38\xfa\x92\xc2\xa3\x22\x6f\xb3\xf3\xf4\x7e\xf7\xe3\xcf\x3b\x4f\xfe\xd4\xbb\x7b\xb1\xf3\xf4\x61\xf7\x83\x75\x77\xed\x8a\x7b\xe9\xd1\x14\x70\x1f\x6f\x6e\xad\xad\x6d\xfd\xf0\x1f\xee\xa5\x2f\xfe\xae\xc9\xea\x18\xa2\x74\xd9\x26\xfa\xb8\xe0\xba\xeb\x1f\xf6\xfe\xf4\xc1\x1e\x23\xeb\xef\x75\x4e\x64\x9a\x8f\x74\x6c\x2a\x87\x22\xbe\x8b\x91\x0e\xdb\xd2\x91\x0e\xf5\x8d\x85\x74\x52\xf8\x95\x41\x7a\x8f\x53\xcf\xbf\xe1\x72\xcd\xb6\x97\x5e\x85\xac\x13\x98\x72\xea\xf8\x91\xd1\xa1\x79\xea\xf8\x91\x97\x92\x6b\x44\x9b\x78\x90\x88\xf7\x71\x14\xc6\xad\xe9\x71\x18\xf7\x8f\x15\x89\xfd\xe2\xcf\x8e\xc5\x74\x12\xfb\xc2\xd5\x86\xfb\x96\xfd\xd9\x61\xa9\x77\xe1\x3b\xf7\xa3\xc7\xee\xf5\x0b\x5b\xab\xbf\x73\xd7\xee\x74\x6f\x7f\x17\x18\xb6\xb5\xfe\x97\xee\x9d\x4f\x0a\x0a\x2a\x15\xca\x44\x49\x37\xa0\x7b\x6b\xbd\x7b\xf5\x83\xde\xdd\x8b\xee\xf5\x3b\xdb\x1f\x5d\xdf\xd7\x32\x9c\xe6\xdc\x21\x5d\x27\xed\x29\xe0\xdf\x1c\xf7\xca\xa9\xa2\xdb\x90\x3e\x04\xf7\xaa\x28\xab\x26\x65\x43\xf2\x92\x4e\x2b\xfe\x8e\xa9\x35\xf0\xcf\x71\x7c\xb6\x81\x29\x7b\x93\x2f\x96\x91\x91\x2c\x08\xbf\x1c\x46\x98\x66\x64\x22\xd8\x13\x3d\xcf\xa0\x87\x83\xe2\x22\x49\x94\x07\xbb\x77\xca\x04\x87\x4d\xf8\x02\xeb\x43\xd0\xd1\xd9\xd8\xec\xfd\xf7\xe6\xdb\x6f\x9d\xdc\x5a\xff\xb6\xfb\xe7\x0b\x7f\xfb\xfe\x6a\x67\xe3\x9a\xdf\x78\xec\xbd\x13\x41\xeb\x8f\xab\x17\xfa\x22\xda\xbd\x71\xb5\xb3\xf1\xf1\x9e\x44\xe0\x38\x29\x7f\x6f\xab\x27\x0b\x8a\x5f\xaf\x99\x62\x4f\x4a\xd1\x67\xa2\xd0\xd3\x89\xd1\xb0\x98\xb4\xec\x15\x13\x4b\x26\xff\xeb\xa3\x52\x26\x18\x2d\xa5\x17\xa1\x7a\x36\x79\xc3\xa8\x71\x1e\xcf\x83\x99\xd9\xe8\x98\xcd\xb4\xab\x5e\x69\xb8\x93\x62\x93\x50\xf9\xca\xd3\x82\xf7\x18\x05\xb1\x86\x7c\x32\x5b\x69\x58\x1a\x33\x6c\x2b\x9b\x6b\x05\xe3\x27\xb3\x50\x16\xbc\x94\x93\x6d\x2b\x9b\xf1\x4e\x0c\x32\x53\x91\x34\xce\x81\x56\xf4\x64\x58\x76\x08\x6e\x62\x8b\x2d\xe0\x0a\x6a\x98\x2c\x9b\x3b\x18\xf5\x4d\x66\x33\x7c\x6b\xcc\xe4\x64\x64\x19\x75\xc4\x70\xb6\x05\xa8\x46\x6c\xd3\x3c\xc9\x9f\x6c\x1a\xb4\xa7\xc0\xec\xf4\xb4\x38\x42\x46\x67\xd0\xb9\x6c\x4b\xc0\xb4\x8e\x59\xcd\xd6\xe7\x01\xe4\x61\x07\xa7\x84\x9e\x06\x31\xe7\x01\x54\x28\x6a\xe2\x44\xbb\x8e\x18\x9a\xe7\x93\x73\xb4\x32\x39\x99\x62\x62\x20\xd3\x38\x8f\xb3\x39\x51\x2c\xa8\x78\x9d\x07\xe1\x83\x81\xac\x5f\xcb\x2a\x3e\x5e\xf0\x18\xb2\x57\x24\x9b\xc9\xc9\x1a\xa5\xd9\xb0\x36\x16\x4e\x01\x58\x36\x6d\x6d\x09\x0a\x4f\xc0\xff\x19\x95\x50\x15\xf8\xa7\x62\x11\x40\x7b\x09\xf6\xeb\x4c\x6a\x45\xba\x7e\x98\x87\x47\xd6\x2f\xc9\x95\x74\xfe\x2a\x49\x60\x7f\x25\xdc\x64\x36\xb3\x2f\x2a\xb7\xcd\xe4\xe4\x1a\xab\x9b\xa1\xcd\x09\xd1\x36\xc0\x26\xc5\x03\x53\x2a\x0a\xb0\x97\xfa\xda\x28\x66\x27\x8d\x3a\xb6\x1b\x2c\x25\x1c\xc6\xf3\x81\x57\x08\xdf\xe7\x02\x10\x60\x3b\xdd\x67\xd8\x84\x28\x20\xdc\x60\x42\x6c\x12\x43\x91\x3d\x73\xf6\x57\xef\x1c\xef\x77\x9a\x67\x80\xdf\x25\x53\x86\x58\x83\x9e\xc4\xe7\x58\x62\xe6\x78\x82\x76\x38\x73\x3b\xe7\xaf\xe0\xf0\xb7\x89\x08\x28\xe3\x8a\x4d\xb0\x57\x67\x53\x84\xd0\x6f\x8f\xc2\x60\xb0\x94\x35\xb2\x43\xb7\xb5\x46\x1d\x5b\x4c\xae\x62\xf6\x96\x89\xf9\xe5\x9b\x2b\x8b\x7a\x36\x28\xd9\xc9\xc9\xba\xe1\x95\xda\xeb\x45\xe0\xd5\xda\x07\xc3\x78\x40\x08\x53\xc6\x3e\x19\xa9\xcf\x67\x53\xa2\xbd\x13\xa3\x4c\x11\x6a\x9b\x72\xb2\x61\x59\x98\xbc\x73\xf2\xdd\x23\xa0\x08\xe0\x21\x2f\xe0\xff\x15\xaf\x80\xc5\x05\x38\x86\x1a\xb1\xca\x67\xa8\xaa\xa0\xc0\x66\x0c\x75\xfe\xb6\xd4\xa7\x28\xa6\x64\x99\xd3\x1e\x27\xcb\xf8\x9c\x2c\x13\x72\x32\x82\xea\xb2\x66\x5b\xd4\x36\xb1\x8c\x4c\x63\xa5\x61\x79\xfc\xac\x8e\x2c\x54\xc5\x0a\x5a\xfa\x05\x75\xea\xc5\xfd\x33\x3f\x53\xe5\x99\xfc\x81\x99\x03\xd3\x3f\x9f\x95\x2d\xd4\x94\x08\xcf\xad\xb2\x8e\x96\xe4\xb9\x03\x07\x7e\x36\xa3\xea\xd3\xf5\x77\xd0\xbb\xd5\x6a\xa6\xe4\x5e\xfe\xa3\xfb\x78\x13\x44\x4f\xc0\x19\x9b\x6f\x7e\xbb\x2f\x10\x06\x4b\x66\x5f\x93\x40\xd8\x31\xfc\x27\xed\x25\x6c\xed\x1d\xe6\x21\xde\x3e\x00\xb2\x66\x29\x48\xd3\xec\x86\xc5\x14\xc6\x27\x0e\x31\x74\xd7\x3f\xdc\xfe\xf7\x2f\x86\xe3\x97\x5e\x49\x3b\x1a\xc3\xe1\x8e\x0b\x1f\x59\x80\x01\x14\xc7\x04\xef\xf9\x23\x87\x91\xf1\x47\x05\xf1\x01\x5f\x6d\x60\x75\x44\x6b\x72\x0c\x8b\xb7\x92\x1d\x62\x57\x0c\x13\x2b\xc8\x31\x24\x0f\x5e\x1a\xe2\xdb\x79\xfc\x79\xef\xca\x55\xa9\xd4\xfb\xfe\xf6\xd6\x0f\x37\xdd\xab\x9b\xee\x83\x07\x60\xe1\xe8\x89\x6c\xe7\xc9\xd3\xde\xad\x47\xdd\x47\x0f\xbb\xf7\x9f\xe6\x86\xe3\x3f\xa4\x32\xf7\x35\x59\xc4\x7e\x02\x03\x5e\x3a\xd7\x77\x08\xbb\xdf\x05\x62\x95\x7b\xbf\xb6\x05\x70\xbc\x30\x30\x50\x5d\xf9\x85\x69\x7b\xff\x33\xf3\x7c\x4d\xd2\xac\x7d\x4a\xdd\xb0\x30\x5f\xf9\x7e\x9e\xce\x94\xba\xb7\xbf\x71\xff\xf3\xb3\xad\xb5\xa7\xdb\x7f\x58\x1b\xb2\xf6\xf9\xe6\xae\xfb\x75\xdc\xa0\x08\x32\xad\x56\x5c\x7c\xdd\x6e\x67\x7c\x19\xba\x6c\x30\xad\x96\x0d\xc4\x22\xb2\xa3\x21\x1a\xff\xf7\x87\x79\x81\x7a\x0c\x6e\x03\x51\x97\x47\xdb\x43\xfe\xd1\x4e\x28\x12\x8a\xe8\x45\x65\xe9\x39\x69\x1c\x85\x62\x8d\xb7\xa8\x71\x48\x94\x3f\x5b\xa5\xee\xb3\x75\x51\xcf\x20\xed\x79\x96\x8a\xb6\xf7\x66\x11\xbe\x4f\x4c\x08\x6f\x16\xd1\xf2\xab\x62\x76\xc4\xae\xd2\x68\xc1\x4d\xf2\x20\xca\x42\xc5\x7b\x6b\x99\x8a\xb9\x5e\xc0\x60\x85\x77\x90\x7d\x9e\x48\x0a\xc1\xf5\x48\x1d\x9f\x3a\xd2\x3d\xe1\x51\x58\xef\x2b\x5a\x13\x99\xd9\xa0\x7d\x0a\xec\x07\xff\x0c\x66\x3c\xfe\x99\x6e\x25\x0f\x14\x23\x2e\x83\x0b\x83\x45\xac\x69\xe3\x01\x13\x09\xaa\x83\x82\x6a\x52\x90\xa7\x85\x84\x46\x4e\xfd\x13\x5f\x63\x43\x47\x0c\x7e\x7b\xf5\xca\x6a\x3c\xbe\x9f\xa0\xee\xd1\x17\x73\xa1\x7f\x22\x9e\x4a\x7d\xd1\xa9\xd4\x11\x53\xa9\xf1\x54\x8a\x02\xfc\x13\x2f\xf1\xeb\xba\x88\x72\x34\xd0\x3b\xa5\x89\xb0\xce\xc2\x7d\xf0\x0d\xaf\xe9\x0d\x98\xfa\x19\x74\xd8\x7b\x44\xca\xf0\x06\x31\x53\xc4\x83\x57\x2f\x7f\x4d\x73\x8f\xf8\x47\x4e\x9e\x2f\x7c\x77\x01\x31\xa4\x92\xe5\x6b\x41\x6c\x41\xf7\xe1\xff\xba\x1f\x7e\xda\xbb\x7b\xf1\xd4\xf1\x23\xdb\xf7\x56\xb7\x9e\xde\x72\xff\xf8\x99\x7b\xe9\xab\xde\x93\x9b\x8b\xc7\xde\x9f\x73\xef\x7d\xe3\xde\x5f\xfd\x71\xf5\x82\xfb\xe5\x85\xbf\x7d\x7f\x37\xcc\x61\x7c\xab\xe2\xfa\x64\xc3\x91\x69\x59\x31\x9c\x1f\x57\x3f\x08\xfb\xea\x2b\x86\x23\x1b\x8e\xe1\xc8\x16\x66\x42\xbb\xae\x5b\x54\xb6\x09\x5a\xf1\xb2\x9d\xf7\xed\xdc\x70\x82\xc7\xed\x7b\x5f\x0b\xcc\x55\x9f\xd7\x5c\xf5\xd9\xe6\xaa\x69\xe6\x36\x55\xd9\xb3\xd8\x44\xca\x19\x6a\x5b\x42\x0f\x75\x30\xd6\x65\x0b\x37\x54\x19\xeb\x0d\x4e\xc2\xaa\x98\x2d\x1e\x93\x9d\x5a\x64\xf6\x40\x90\x88\xdf\xf8\xc5\x20\x19\x0c\xc3\x67\x44\x4b\x3a\xdc\x43\xa3\x63\xbc\xe0\x0a\xa3\x65\x27\xc1\x32\x58\xc7\xb0\x78\x2c\xfc\xb0\xe1\xde\x7b\xe4\x7e\x7e\xd7\x5d\x7b\xe2\x6e\x7c\xd9\xbb\x7b\x71\xeb\xdb\xf5\xde\xad\x3f\xbb\x9f\x3e\xea\x6c\x7c\xed\xb3\x95\xe7\x85\x3a\x7d\xb2\xed\xc7\x77\xb6\xd6\x3e\xf7\x35\xf6\xbe\xfa\xca\xff\x9e\x1b\x43\x9f\xed\x6c\xac\x6e\x5d\xfe\xaa\xb3\xb1\xb9\x7d\xff\xb3\xce\xc6\x5f\xba\x7f\xf8\x6b\xef\xee\x45\xde\x9f\x8b\x30\x4b\xe4\xe2\xc8\x8d\x89\x52\x84\xc1\xe4\x9c\x30\x78\x94\xef\x71\xdd\x61\x2b\xd1\xf6\x61\x54\x52\xce\x55\x78\x56\xf5\x5b\x7f\x49\x6d\x0b\x14\xc1\x2f\x4f\xbc\x77\x54\x76\x10\xa1\x78\xe0\x44\xa3\x62\x13\x90\xf5\xd2\x70\x71\xfa\x20\x30\x0a\xf1\x38\xd9\xc4\x56\x95\xd5\x0e\x02\xe3\x8d\x37\x92\x87\x05\xe3\x98\x89\x1c\x07\x5b\x7a\x36\x71\xc4\xf0\xdb\x82\xed\x78\x11\xeb\x53\xb5\xcc\x64\x2b\x9e\xed\xd7\xc6\x6f\x7c\x22\x91\x49\x1e\x57\xa6\xca\x64\xfb\x5b\x0f\xe9\x3a\xc1\x94\xfe\x7a\xfa\x37\xed\x5c\xdf\xb9\xa6\x3f\x65\xe9\xb7\x42\xb3\x70\xa8\x11\x1f\x69\x28\x0a\xd8\x5e\xbd\xd2\xd9\xf8\x3a\x6a\xe1\x91\x0c\xa3\x7d\x4b\xc4\xb0\xdd\x86\xfe\xe1\x13\x7c\x7e\xc7\xf0\x8d\x74\xa8\xd6\xdc\x80\x61\x03\xa7\x4d\x03\xcb\x39\x19\xd9\x05\xea\x20\x2b\x38\xea\xcc\x68\xb6\x69\x93\x79\x40\xb0\x9e\x29\x75\xff\xef\x61\xf7\xde\x95\xee\x95\x1f\xdc\xcb\xdf\xb8\xd7\xd7\x79\x88\xdf\xbd\xe8\xaf\x80\x82\xc2\x07\x95\xa2\xd9\xdb\x22\x1d\x88\x77\xf8\x82\xc2\xa7\x28\xfd\x7f\x00\x00\x00\xff\xff\x63\xe8\xfe\xa6\x87\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17543, mode: os.FileMode(493), modTime: time.Unix(1608863014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
