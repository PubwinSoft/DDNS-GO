// Code generated for package static by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/common.css
// static/favicon.ico
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _commonCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xdb\xae\xda\x30\x10\x7c\xe7\x2b\x56\x3a\x2f\xad\x74\x8c\x92\x70\x11\x32\x1f\x73\xe4\xd8\x9b\xc4\xc5\xb1\xad\xf5\x72\x08\xad\xfa\xef\x55\x6e\x28\x40\x69\xfb\x50\x24\x4b\x78\x66\xd6\xce\xce\x8e\xcb\x60\xae\xf0\x63\x05\x00\x50\x2a\x7d\xaa\x29\x9c\xbd\x11\x3a\xb8\x40\x12\xde\xaa\xa2\xda\x54\x87\xe3\xea\xe7\x6a\xb5\x8e\x81\xd8\x21\x4f\x62\x63\x53\x74\xea\x2a\x41\x5c\xb0\x3c\x59\x16\x65\xe8\x8e\xf7\x4c\xe5\x70\x82\x16\x1a\xd1\xa3\x12\xf2\x91\xe8\x37\xa2\xa6\x70\xb9\x21\x4b\x69\x20\x8b\x9e\x25\x7c\x22\xb1\xd5\xca\x3d\x2b\x8c\x25\xd4\x6c\x83\x97\xe0\x03\xb5\xb3\x64\x38\x76\xc1\xe9\xe0\xce\xad\x1f\xb9\xbe\x2c\x35\xca\xf4\x77\x66\xb1\x1b\x56\xbe\x89\x1d\xf4\x8b\xea\x52\x7d\x39\x14\xef\xb0\xdf\xbc\x43\x9e\xed\xde\x21\x5b\x67\xbb\xaf\xc7\x97\xfe\x0c\xbf\x91\x6e\x15\xd5\xd6\x8b\x32\x30\x87\x56\x42\x91\xc5\x6e\xbe\x91\x0c\x92\x20\x65\xec\x39\x49\xd8\xf6\xf8\xd2\xd0\xf9\xcf\xc7\x47\x83\xca\x3c\xfa\xfb\x7b\x17\x95\xb3\xb5\x97\x90\x98\x90\x75\xf3\xcc\x47\xa5\x4f\x12\xbe\x9d\x13\xdb\xea\x3a\xd2\xd3\x46\xe8\xe0\x79\xb0\x35\x45\xa5\x51\x94\xc8\x17\xc4\xc9\x9c\x18\x92\x1d\x2d\x23\x74\x8a\xed\x27\x4e\xb8\x32\xc6\xfa\x5a\x42\xb6\xe8\x6b\x6c\x58\x42\x76\xd7\xe6\xdc\x7f\x1e\x3b\x48\xc1\x59\x03\x6f\x58\xa2\xa9\x8a\xa9\xc8\x7a\xd1\xa0\xad\x1b\x96\xb0\x7f\xb4\x88\x43\x14\x0e\x2b\xbe\xf7\xea\x41\x40\x7d\xf1\xb3\x62\x70\x44\x58\xc6\x36\x49\xd0\xe8\x19\x69\x0a\x43\xf0\x2c\x92\xfd\x8e\x12\xf2\x75\x41\xd8\x2e\xe0\xcb\xf4\x25\xbb\xed\xd4\xc4\x3c\xd8\xed\x61\xbb\xdf\x95\xaf\xe6\xb4\x78\x34\xff\xf0\x0e\x44\x9b\x86\xd4\xdf\x98\xff\x92\xf1\xf9\xd4\x57\x39\xff\x13\x77\x1b\xe7\x5f\x42\xfa\x2b\x00\x00\xff\xff\x5e\xd0\x1b\x54\x1d\x04\x00\x00")

func commonCssBytes() ([]byte, error) {
	return bindataRead(
		_commonCss,
		"common.css",
	)
}

func commonCss() (*asset, error) {
	bytes, err := commonCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.css", size: 1053, mode: os.FileMode(420), modTime: time.Unix(1608778698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\x5d\x68\x5c\x45\x14\xc7\x27\x5a\xab\xb6\x0f\xb6\x2a\x56\x90\xb6\x41\x2c\x28\x3e\xf8\x01\xbe\x16\x85\x3e\x09\x8a\xf4\x45\x7c\x90\x6a\xb1\xd6\xe6\x41\x2a\xe2\x67\xdb\xec\x6c\xf7\xa4\xdb\x34\x6d\x36\xd9\x26\x69\xf6\x23\x9b\xdd\x9d\x3b\x9b\x16\x0a\x42\xf5\x41\x7c\x31\x2a\x2a\x0a\x45\xa8\x68\x2b\x82\x36\x56\x0a\xa5\x96\x76\x9b\xe4\xbf\xa9\xfd\x38\x72\xee\xbd\x6b\x36\xeb\xcd\xee\xdd\x18\xbd\xf0\x67\xd8\x7b\x67\xce\xef\x9c\x33\x67\xce\xac\x52\x6d\xaa\x4d\xb5\xb7\xcb\xd8\xae\x0e\xaf\x50\xea\x1e\xa5\xd4\x83\x4a\xa9\x76\xa5\xd4\x93\xca\x7b\xef\x3e\x2b\x94\xba\x73\xb9\xa7\xa0\x87\xa2\x15\xd5\x15\xad\xb4\x91\xc6\x03\xa4\xa1\x49\xe3\x43\xd2\x38\x49\x1a\x65\xd2\xb8\x4a\x1a\x33\xa4\x71\x91\x34\xce\x91\xc6\x19\xd2\xf8\xce\x9f\x53\x24\x8d\x4d\xa4\xb1\x8a\x34\x64\x7d\x30\xa0\xc1\x23\x6b\x48\x63\x29\x69\x6c\x21\x8d\x1f\x49\xe3\x1a\x69\x70\x0b\x02\x69\x1c\x27\x8d\xad\xa4\x71\x7b\x2b\x3e\xc8\xdc\x23\x07\x4e\xc9\xd8\x41\x1a\x93\x2d\x72\xeb\x55\x21\x8d\x1e\xd2\x58\x16\xd6\x07\x3f\xf6\x87\x48\xe3\xd7\x7f\xc9\xae\x4a\xf6\x69\x1b\x45\x5c\xbb\xb2\xa7\xd5\x7d\x6d\x27\x8d\xa7\x49\x63\xdd\x5e\x9a\x51\x5d\x51\x28\xea\x9c\xae\xf2\xb7\x2f\x12\xbb\xaa\x9f\x49\x23\x49\x1a\xbd\xa4\x11\xf7\xc7\xef\x49\xe3\x18\x69\x3c\x47\x51\x2c\x21\xe1\x6b\xe1\x4f\x2f\xf5\xdf\x2f\x26\x5f\x34\x46\x1a\x1b\x48\x63\xb3\xbf\xaf\x27\x24\x76\x89\x77\x27\x95\xd5\x2e\x2a\x57\x63\x5f\xe5\xd7\xdc\x62\xf3\x37\xfb\xf6\x1f\x27\x8d\x0b\xa4\x71\xdd\x3f\x27\xf5\x7b\xbf\x86\x34\x26\xfe\x03\xfe\xbb\x9e\xfd\x8a\x9c\x87\xd7\x49\xa3\x9f\x34\x1e\xf9\x1f\xf9\x7b\x9b\x9d\x81\x46\xfc\x58\xc4\x1b\xf7\xec\x06\xef\xa5\x7f\x4a\xde\xd7\xce\x0b\x50\xdf\x42\xf9\xf1\x18\xb8\x77\x1f\x78\xe8\x20\x78\x24\x0d\x2e\xe4\xc0\x85\xd1\xb9\xca\x65\xc1\xc3\x83\xe0\xc4\x7e\x70\x77\x57\x20\x7f\xa0\x55\x7e\x57\x14\xdc\xb7\xdf\xb3\xed\x14\xc1\xd6\x34\x56\xc9\xf1\xc6\x7c\x0e\x7c\xb0\x6f\x36\x27\x2d\xc6\xbf\x5a\x7a\x8f\xb0\x07\x92\x8d\xb9\xcd\x7c\x4a\x0f\x83\xe3\xf4\x37\xff\xcd\x90\xfc\xe5\xa4\xf1\x49\x7f\xef\xfc\xf6\x25\xbe\x81\x7e\xf0\xfe\x6e\x2f\xdf\x99\xd4\xfc\x73\x53\x43\x6e\x1e\xcb\x14\xc1\xfa\x66\xfc\x58\xb4\xa2\xb2\x29\xa8\x44\x0f\x3a\xf2\x39\xdc\x08\xb2\x37\x9a\x05\xef\x8b\xcf\xd6\x9a\x48\x72\x35\x98\x9c\x3f\x47\xc9\x04\xbe\x8d\xec\xc0\x4a\xe9\xb1\xcd\x1e\x5b\x84\xb2\x06\x2f\x59\x83\xeb\x41\xb6\xa4\x1e\x82\x6a\x7c\x4f\x0c\x3c\x92\x09\xf6\xc1\x14\x30\x3e\x9a\xc5\xb2\x42\xae\x31\xdf\x9a\x69\xd1\x12\x6b\x30\x16\x68\x27\xef\xc5\xae\x77\x96\x39\xf2\xfe\x45\x2f\x07\x9d\x53\xdc\xf9\xde\x05\x8e\x45\xa6\xf9\xd0\xe0\x6c\x0d\xd6\x69\xc2\x1a\xac\xb3\xa6\x19\xdf\x8d\xfd\x6e\x6b\x70\x22\x88\x5f\x14\xfe\x1e\x70\x74\xe7\x65\xd6\x3b\x2e\xf9\x7b\x30\xe5\xfa\x22\x39\x19\x9e\x9f\x7f\xd5\x1a\x6c\x0c\xc9\x5f\x63\x0d\x4e\xcf\x5d\x5f\xe1\x92\x73\xc5\x1d\x13\x4d\xf2\x5f\x72\x2a\xee\xbc\x00\x1f\xb6\xb7\xc0\x9f\xa8\x65\xe7\x73\xe7\xb9\xa7\xfb\x4b\xce\x66\xce\x72\x7e\xa4\xc2\x3d\x52\x7f\x91\xb9\xf5\x27\xbd\x49\xe6\x67\xd3\xbf\xf3\x68\xee\x8f\x20\x7e\x67\x48\xfe\xea\xda\xf8\x4b\xce\x0c\x77\xee\x3a\xca\xaf\x6d\x7d\x85\x87\x06\x3f\xf5\xfd\xf1\xea\x3d\xd1\x03\x96\x73\x9a\x19\x96\xb9\x33\x9c\xec\x3b\xc1\x2f\x6f\xea\xe0\x58\xb4\xc8\xa6\x30\x59\xcf\x7f\x2b\x24\xff\x0e\x6b\xf0\x75\x2d\xbf\x3b\x3e\xce\xef\xbc\x1d\xe5\x42\xfe\x87\xf9\x72\xeb\xce\x4b\xf4\x1e\xe7\x8e\x6d\x6f\xf0\x48\xf6\x63\x36\x85\xcb\xb5\xdf\x67\xac\xc1\x33\x21\xf9\xa2\xdd\x73\xcf\xdd\x14\x67\xd3\x67\xb9\x98\xbf\xdc\xb0\xdf\xc9\xbc\x4c\xea\x37\xce\x8d\x9c\xab\xff\x76\xd2\x1a\xdc\xd7\x8c\x5f\xe3\xc3\x13\xd6\xe0\x7c\x7d\x0d\x36\xeb\xff\x5e\x1e\x02\xeb\x6f\xc0\x3a\xb8\x29\x14\xdf\x81\xb2\x4e\x45\x7a\x40\x6f\x18\x5e\x08\x49\x2d\x3f\x1c\x86\x5d\x97\x83\x8d\x4e\xd1\x3d\xb7\x0b\x66\x4b\xbf\x34\x05\x7c\x53\xb2\x6e\x4d\xb5\xca\xdf\x72\x68\x00\x9c\x4d\x2d\x80\xed\x78\xbd\x4a\xee\xe0\x6c\x1a\xbf\x1c\x19\x73\xcf\x54\x4b\xfc\x92\x83\x6d\xc9\x84\xf7\xdf\x43\xfc\x30\x85\xf0\x7c\xe9\x43\x07\xf6\x79\x3d\x29\x97\xc1\xc4\xe1\x31\xb7\xa7\xb4\xca\x7f\x55\xee\x4e\xe9\x6d\xf2\xff\x2a\x97\xc5\x25\x6b\x70\xd4\x1a\xfc\x64\x0d\x60\x0d\xfe\xb4\xc6\xbd\x23\xaf\xf9\xe7\xeb\x82\x35\xf8\xc8\x1a\x1c\x1b\x3a\x88\x1b\xb2\x4e\xee\x67\x53\xc0\xa9\x92\x83\x7b\x17\xc0\x7f\xaa\x98\xc7\x64\xff\x01\x77\x0f\xe4\x2e\x4c\x94\x1c\xdc\x66\x0d\xd6\x5a\x83\xf5\xd6\xe0\x59\x6b\xf0\xa2\x35\x78\xde\x1a\x6c\xb0\x06\x8f\x59\x83\x65\x25\x07\x6b\x9d\x22\xbe\x92\xbb\x20\x7d\xc8\xcd\x47\xc9\x1a\x2c\x59\xc0\xfe\x4b\xcd\x7c\xee\x14\x5d\x76\xde\x1a\xdc\xd5\xb4\x7f\x38\xae\xdf\xa2\x47\x65\xad\x35\xb8\x62\x0d\x5e\x68\x85\x2d\x4f\xc9\xa9\x54\x7d\x90\x3b\x23\x6e\x0d\x56\xca\xef\xd4\x07\x1c\xc2\xf7\x29\x65\x4d\xa5\x7a\x8f\x44\xac\xc1\xfd\x61\xf9\x97\xd4\xad\x7c\x5a\xdd\xcc\xe3\xaa\x4d\xf4\xd9\xb8\x52\x6d\x5a\xa9\x5b\xb4\x52\x71\x5f\x1c\xa4\x71\x5f\xcd\xbe\x8b\xdd\xd3\x41\xe2\x2f\xb8\xcc\x67\xf8\xaf\x00\x00\x00\xff\xff\xe0\xdd\xf5\x70\xbe\x10\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 4286, mode: os.FileMode(420), modTime: time.Unix(1608778698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common.css":  commonCss,
	"favicon.ico": faviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"common.css":  &bintree{commonCss, map[string]*bintree{}},
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
